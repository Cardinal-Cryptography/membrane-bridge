name: Build and push relayer

on:
  workflow_call:
    inputs:
      layer:
        description: Relayer to build - L1 or L2
        type: string
        required: true
    outputs:
      docker-tag:
        description: Docker image tag
        value: ${{ jobs.build-and-push.outputs.docker-tag }}

jobs:
  check-vars-and-secrets:
    name: Check vars and secrets
    uses: ./.github/workflows/_check-vars-and-secrets.yml
    secrets: inherit

  build-and-push:
    needs: [check-vars-and-secrets]
    name: Build and push
    runs-on: [self-hosted, Linux, X64, large]
    outputs:
      docker-tag: ${{ steps.build.outputs.docker-tag }}
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
    steps:
      - name: Check inputs
        shell: bash
        run: |
          if [[ \
            '${{ inputs.layer }}' != 'L1' && '${{ inputs.layer }}' != 'L2'
          ]]; then
            echo 'Invalid layer'
            exit 1
          fi

      - name: Checkout Source code
        uses: actions/checkout@v4

      - name: Call action get-ref-properties
        id: get-ref-properties
        # yamllint disable-line rule:line-length
        uses: Cardinal-Cryptography/github-actions/get-ref-properties@v6

      - name: Download artifacts from S3 bucket
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CONTRACTS_MOST_ARTIFACTS_RO_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CONTRACTS_MOST_ARTIFACTS_RO_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.CONTRACTS_S3BUCKET_REGION }}
        shell: bash
        run: |
          # Download artifacts from S3 bucket
          mkdir -p {downloaded_azero_artifacts,downloaded_eth_artifacts}
          for c in azero_most azero_advisory azero_token; do
            aws s3 cp --recursive s3://${{ secrets.CONTRACTS_S3BUCKET_NAME }}/most/artifacts/${{ github.sha }}/$c downloaded_azero_artifacts
          done
          for c in eth_most eth_mostl2 eth_weth9; do
            aws s3 cp --recursive s3://${{ secrets.CONTRACTS_S3BUCKET_NAME }}/most/artifacts/${{ github.sha }}/$c downloaded_eth_artifacts
          done

          # Put artifacts in the same directories as they would have been compiled locally (that is how relayer searches for them)
          mkdir -p azero/artifacts
          cp -rf downloaded_azero_artifacts/*.json azero/artifacts/

          mkdir -p eth/artifacts/contracts/{Most.sol,MostL2.sol,WETH9.sol}
          cp -rf downloaded_eth_artifacts/Most.json eth/artifacts/contracts/Most.sol/Most.json
          cp -rf downloaded_eth_artifacts/MostL2.json eth/artifacts/contracts/MostL2.sol/MostL2.json
          cp -rf downloaded_eth_artifacts/WETH9.json eth/artifacts/contracts/WETH9.sol/WETH9.json

          # Print out all the files
          find eth/artifacts
          find azero/artifacts

      - name: Install Rust toolchain
        uses: Cardinal-Cryptography/github-actions/install-rust-toolchain@v6

      - name: Build relayer
        id: build
        run: |
          docker_tag=${{ steps.get-ref-properties.outputs.sha }}

          # There are two types of relayers: L1 and L2
          if [[ '${{ inputs.layer }}' == 'L2' ]]; then
            docker_name=most-l2-relayer-${docker_tag}
            make build-docker-relayer \
              L2=true \
              DOCKER_RELAYER_NAME=${docker_name} \
              DOCKER_RELAYER_COPY_ADDRESSES=no_copy \
              DOCKER_RELAYER_COMPILE_CONTRACTS=no_compile
          else
            docker_name=most-relayer-${docker_tag}
            make build-docker-relayer \
              DOCKER_RELAYER_NAME=${docker_name} \
              DOCKER_RELAYER_COPY_ADDRESSES=no_copy \
              DOCKER_RELAYER_COMPILE_CONTRACTS=no_compile
          fi

          echo "docker-name=${docker_name}" >> $GITHUB_OUTPUT
          echo "docker-tag=${docker_tag}" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ECR_PUBLIC_HOST }}
          username: ${{ secrets.AWS_RESOURCES_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_RESOURCES_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Push docker image to ECR
        shell: bash
        run: |
          if [[ '${{ inputs.layer }}' == 'L2' ]]; then
            docker_image='${{ vars.ECR_CC_RES_PUBLIC_REGISTRY }}most-l2-relayer:${{ steps.build.outputs.docker-tag }}'
          else
            docker_image='${{ vars.ECR_CC_RES_PUBLIC_REGISTRY }}most-relayer:${{ steps.build.outputs.docker-tag }}'
          fi

          docker tag '${{ steps.build.outputs.docker-name }}' "${docker_image}"
          docker push "${docker_image}"
