name: Build and push relayer

on:
  workflow_call:
    inputs:
      environment:
        description: One of 'bridgenet', 'testnet', 'mainnet'
        type: string
        required: true
      contracts-commit-sha:
        description: Commit SHA of contract artefacts
        type: string
        required: true
    outputs:
      docker-tag:
        description: Docker image tag
        value: ${{ jobs.build-and-push.outputs.docker-tag }}

jobs:
  check-vars-and-secrets:
    name: Check vars and secrets
    uses: ./.github/workflows/_check-vars-and-secrets.yml
    secrets: inherit

  build-and-push:
    needs: [check-vars-and-secrets]
    name: Build and push
    runs-on: [self-hosted, Linux, X64, large]
    outputs:
      docker-tag: ${{ steps.build.outputs.docker-tag }}
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
    steps:
      - name: Check inputs
        shell: bash
        run: |
          if [[ \
            '${{ inputs.environment }}' != 'bridgenet' && \
            '${{ inputs.environment }}' != 'testnet' && \
            '${{ inputs.environment }}' != 'mainnet' && \
          ]]; then
            echo 'Invalid environment'
            exit 1
          fi

          if [[ ! '${{ inputs.contracts-commit-sha }}' =~ [a-z0-9]+ ]]; then
            echo 'Invalid contracts commit sha'
            exit 1
          fi

          # TODO: Remove when implemented
          if [[ \
            '${{ inputs.environment }}' == 'testnet' || \
            '${{ inputs.environment }}' == 'mainnet' \
          ]]; then
            echo 'testnet and mainnet are not implemented yet'
            exit 1
          fi

      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Call action get-ref-properties
        id: get-ref-properties
        # yamllint disable-line rule:line-length
        uses: Cardinal-Cryptography/github-actions/get-ref-properties@v6

      - name: Install Rust toolchain
        uses: Cardinal-Cryptography/github-actions/install-rust-toolchain@v6
        with:
          targets: wasm32-unknown-unknown

      - name: Install necessary tools
        shell: bash
        run: |
          npm install typechain
          cargo install cargo-contract

      - name: Download files from S3 AWS bucket
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEVNET_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEVNET_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-central-1
        # yamllint disable rule:line-length
        run: |
          env_dir='${{ inputs.environment }}'
          
          # TODO: Will be renamed/removed
          if [[ '${{ inputs.environment }}' == 'bridgenet' ]]; then
            env_dir='fe_bridgenet'
          fi

          # TODO: For testing now
          mkdir -p azero/artifacts

          s3_path="miko-test/most/${{ inputs.contracts-commit-sha }}/relayer/${env_dir}"
          aws s3 cp s3://alephzero-devnet-contracts-test/${s3_path}/azero_addresses.json azero/addresses.json
          aws s3 cp s3://alephzero-devnet-contracts-test/${s3_path}/eth_addresses.json eth/addresses.json
          aws s3 cp s3://alephzero-devnet-contracts-test/${s3_path}/most.json azero/artifacts/most.json
        # yamllint enable rule:line-length

      - name: Build relayer
        id: build
        run: |
          contracts_sha='${{ inputs.contracts-commit-sha }}'
          contracts_sha_short="${contracts_sha:0:8}"
          docker_tag=${{ steps.get-ref-properties.outputs.sha }}-${contracts_sha_short}-${{ inputs.environment }}
          docker_name=most-relayer-${docker_tag}

          make build-docker-relayer DOCKER_RELAYER_NAME=${docker_name}

          echo "docker-name=${docker_name}" >> $GITHUB_OUTPUT
          echo "docker-tag=${docker_tag}" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ECR_PRIVATE_HOST }}
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Push docker image to ECR
        shell: bash
        run: |
          docker_image='${{ secrets.ECR_PRIVATE_HOST }}/most-relayer:${{ steps.build.outputs.docker-tag }}'

          docker tag '${{ steps.build.outputs.docker-name }}' '${docker_image}'
          docker push '${docker_image}'
