[0m[0m[1m[32m   Compiling[0m tests v1.0.0 (/tmp/cargo-contract_pOrwjJ)
[0m[0m[1m[36m    Building[0m [=======================> ] 122/123: tests(bin)                                      [K[0m[0m[1m[32m    Finished[0m release [optimized] target(s) in 0.40s
[0m[0m[1m[32m    Finished[0m release [optimized] target(s) in 0.05s
[0m[0m[1m[32m    Finished[0m release [optimized] target(s) in 0.06s
[0m[0m[1m[32m    Finished[0m release [optimized] target(s) in 0.05s
[0m[0m[1m[32m    Finished[0m release [optimized] target(s) in 0.12s
[0m[0m[1m[32m    Finished[0m release [optimized] target(s) in 0.05s
    Finished test [unoptimized + debuginfo] target(s) in 0.20s
     Running unittests lib.rs (target/debug/deps/tests-5527d788285f8e10)
[2023-11-07T13:43:04Z ERROR ink_e2e] [test: adding_pair_works] extrinsic for call failed: Module(ModuleError { metadata: Metadata { inner: Metadata { types: PortableRegistry { types: [PortableType { id: 0, ty: Type { path: Path { segments: ["sp_core", "crypto", "AccountId32"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }] }), docs: [] } }, PortableType { id: 1, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 32, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 2, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U8), docs: [] } }, PortableType { id: 3, ty: Type { path: Path { segments: ["frame_system", "AccountInfo"] }, type_params: [TypeParameter { name: "Nonce", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountData", ty: Some(UntrackedSymbol { id: 5, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("nonce"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Nonce"), docs: [] }, Field { name: Some("consumers"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RefCount"), docs: [] }, Field { name: Some("providers"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RefCount"), docs: [] }, Field { name: Some("sufficients"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RefCount"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 5, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountData"), docs: [] }] }), docs: [] } }, PortableType { id: 4, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U32), docs: [] } }, PortableType { id: 5, ty: Type { path: Path { segments: ["pallet_balances", "types", "AccountData"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("free"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("reserved"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("frozen"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("flags"), ty: UntrackedSymbol { id: 7, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExtraFlags"), docs: [] }] }), docs: [] } }, PortableType { id: 6, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U128), docs: [] } }, PortableType { id: 7, ty: Type { path: Path { segments: ["pallet_balances", "types", "ExtraFlags"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }] }), docs: [] } }, PortableType { id: 8, ty: Type { path: Path { segments: ["frame_support", "dispatch", "PerDispatchClass"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("normal"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("operational"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("mandatory"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }] }), docs: [] } }, PortableType { id: 9, ty: Type { path: Path { segments: ["sp_weights", "weight_v2", "Weight"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("ref_time"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("proof_size"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 10, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 11, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U64), docs: [] } }, PortableType { id: 12, ty: Type { path: Path { segments: ["primitive_types", "H256"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }] }), docs: [] } }, PortableType { id: 13, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 14, ty: Type { path: Path { segments: ["sp_runtime", "generic", "digest", "Digest"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("logs"), ty: UntrackedSymbol { id: 15, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<DigestItem>"), docs: [] }] }), docs: [] } }, PortableType { id: 15, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 16, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 16, ty: Type { path: Path { segments: ["sp_runtime", "generic", "digest", "DigestItem"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "PreRuntime", fields: [Field { name: None, ty: UntrackedSymbol { id: 17, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConsensusEngineId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 6, docs: [] }, Variant { name: "Consensus", fields: [Field { name: None, ty: UntrackedSymbol { id: 17, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConsensusEngineId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 4, docs: [] }, Variant { name: "Seal", fields: [Field { name: None, ty: UntrackedSymbol { id: 17, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConsensusEngineId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 5, docs: [] }, Variant { name: "Other", fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: [] }, Variant { name: "RuntimeEnvironmentUpdated", fields: [], index: 8, docs: [] }] }), docs: [] } }, PortableType { id: 17, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 4, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 18, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 19, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 19, ty: Type { path: Path { segments: ["frame_system", "EventRecord"] }, type_params: [TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 20, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("phase"), ty: UntrackedSymbol { id: 43, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Phase"), docs: [] }, Field { name: Some("event"), ty: UntrackedSymbol { id: 20, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("E"), docs: [] }, Field { name: Some("topics"), ty: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 20, ty: Type { path: Path { segments: ["contracts_node_runtime", "RuntimeEvent"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "System", fields: [Field { name: None, ty: UntrackedSymbol { id: 21, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("frame_system::Event<Runtime>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Utility", fields: [Field { name: None, ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_utility::Event"), docs: [] }], index: 2, docs: [] }, Variant { name: "Balances", fields: [Field { name: None, ty: UntrackedSymbol { id: 33, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_balances::Event<Runtime>"), docs: [] }], index: 4, docs: [] }, Variant { name: "TransactionPayment", fields: [Field { name: None, ty: UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_transaction_payment::Event<Runtime>"), docs: [] }], index: 6, docs: [] }, Variant { name: "Sudo", fields: [Field { name: None, ty: UntrackedSymbol { id: 36, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_sudo::Event<Runtime>"), docs: [] }], index: 7, docs: [] }, Variant { name: "Contracts", fields: [Field { name: None, ty: UntrackedSymbol { id: 38, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_contracts::Event<Runtime>"), docs: [] }], index: 8, docs: [] }, Variant { name: "Assets", fields: [Field { name: None, ty: UntrackedSymbol { id: 41, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_assets::Event<Runtime>"), docs: [] }], index: 9, docs: [] }] }), docs: [] } }, PortableType { id: 21, ty: Type { path: Path { segments: ["frame_system", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ExtrinsicSuccess", fields: [Field { name: Some("dispatch_info"), ty: UntrackedSymbol { id: 22, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchInfo"), docs: [] }], index: 0, docs: ["An extrinsic completed successfully."] }, Variant { name: "ExtrinsicFailed", fields: [Field { name: Some("dispatch_error"), ty: UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchError"), docs: [] }, Field { name: Some("dispatch_info"), ty: UntrackedSymbol { id: 22, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchInfo"), docs: [] }], index: 1, docs: ["An extrinsic failed."] }, Variant { name: "CodeUpdated", fields: [], index: 2, docs: ["`:code` was updated."] }, Variant { name: "NewAccount", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 3, docs: ["A new account was created."] }, Variant { name: "KilledAccount", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 4, docs: ["An account was reaped."] }, Variant { name: "Remarked", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 5, docs: ["On on-chain remark happened."] }] }), docs: ["Event for the System pallet."] } }, PortableType { id: 22, ty: Type { path: Path { segments: ["frame_support", "dispatch", "DispatchInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("weight"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("class"), ty: UntrackedSymbol { id: 23, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchClass"), docs: [] }, Field { name: Some("pays_fee"), ty: UntrackedSymbol { id: 24, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Pays"), docs: [] }] }), docs: [] } }, PortableType { id: 23, ty: Type { path: Path { segments: ["frame_support", "dispatch", "DispatchClass"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Normal", fields: [], index: 0, docs: [] }, Variant { name: "Operational", fields: [], index: 1, docs: [] }, Variant { name: "Mandatory", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 24, ty: Type { path: Path { segments: ["frame_support", "dispatch", "Pays"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Yes", fields: [], index: 0, docs: [] }, Variant { name: "No", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 25, ty: Type { path: Path { segments: ["sp_runtime", "DispatchError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Other", fields: [], index: 0, docs: [] }, Variant { name: "CannotLookup", fields: [], index: 1, docs: [] }, Variant { name: "BadOrigin", fields: [], index: 2, docs: [] }, Variant { name: "Module", fields: [Field { name: None, ty: UntrackedSymbol { id: 26, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ModuleError"), docs: [] }], index: 3, docs: [] }, Variant { name: "ConsumerRemaining", fields: [], index: 4, docs: [] }, Variant { name: "NoProviders", fields: [], index: 5, docs: [] }, Variant { name: "TooManyConsumers", fields: [], index: 6, docs: [] }, Variant { name: "Token", fields: [Field { name: None, ty: UntrackedSymbol { id: 27, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TokenError"), docs: [] }], index: 7, docs: [] }, Variant { name: "Arithmetic", fields: [Field { name: None, ty: UntrackedSymbol { id: 28, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ArithmeticError"), docs: [] }], index: 8, docs: [] }, Variant { name: "Transactional", fields: [Field { name: None, ty: UntrackedSymbol { id: 29, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TransactionalError"), docs: [] }], index: 9, docs: [] }, Variant { name: "Exhausted", fields: [], index: 10, docs: [] }, Variant { name: "Corruption", fields: [], index: 11, docs: [] }, Variant { name: "Unavailable", fields: [], index: 12, docs: [] }, Variant { name: "RootNotAllowed", fields: [], index: 13, docs: [] }] }), docs: [] } }, PortableType { id: 26, ty: Type { path: Path { segments: ["sp_runtime", "ModuleError"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("error"), ty: UntrackedSymbol { id: 17, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"), docs: [] }] }), docs: [] } }, PortableType { id: 27, ty: Type { path: Path { segments: ["sp_runtime", "TokenError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "FundsUnavailable", fields: [], index: 0, docs: [] }, Variant { name: "OnlyProvider", fields: [], index: 1, docs: [] }, Variant { name: "BelowMinimum", fields: [], index: 2, docs: [] }, Variant { name: "CannotCreate", fields: [], index: 3, docs: [] }, Variant { name: "UnknownAsset", fields: [], index: 4, docs: [] }, Variant { name: "Frozen", fields: [], index: 5, docs: [] }, Variant { name: "Unsupported", fields: [], index: 6, docs: [] }, Variant { name: "CannotCreateHold", fields: [], index: 7, docs: [] }, Variant { name: "NotExpendable", fields: [], index: 8, docs: [] }, Variant { name: "Blocked", fields: [], index: 9, docs: [] }] }), docs: [] } }, PortableType { id: 28, ty: Type { path: Path { segments: ["sp_arithmetic", "ArithmeticError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Underflow", fields: [], index: 0, docs: [] }, Variant { name: "Overflow", fields: [], index: 1, docs: [] }, Variant { name: "DivisionByZero", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 29, ty: Type { path: Path { segments: ["sp_runtime", "TransactionalError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "LimitReached", fields: [], index: 0, docs: [] }, Variant { name: "NoLayer", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 30, ty: Type { path: Path { segments: ["pallet_utility", "pallet", "Event"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BatchInterrupted", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("error"), ty: UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchError"), docs: [] }], index: 0, docs: ["Batch of dispatches did not complete fully. Index of first failing dispatch given, as", "well as the error."] }, Variant { name: "BatchCompleted", fields: [], index: 1, docs: ["Batch of dispatches completed fully with no error."] }, Variant { name: "BatchCompletedWithErrors", fields: [], index: 2, docs: ["Batch of dispatches completed but has errors."] }, Variant { name: "ItemCompleted", fields: [], index: 3, docs: ["A single item within a Batch of dispatches has completed with no error."] }, Variant { name: "ItemFailed", fields: [Field { name: Some("error"), ty: UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchError"), docs: [] }], index: 4, docs: ["A single item within a Batch of dispatches has completed with error."] }, Variant { name: "DispatchedAs", fields: [Field { name: Some("result"), ty: UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 5, docs: ["A call was dispatched."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 31, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 32, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [] }), docs: [] } }, PortableType { id: 33, ty: Type { path: Path { segments: ["pallet_balances", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Endowed", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("free_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 0, docs: ["An account was created with some free balance."] }, Variant { name: "DustLost", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 1, docs: ["An account was removed whose balance was non-zero but below ExistentialDeposit,", "resulting in an outright loss."] }, Variant { name: "Transfer", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 2, docs: ["Transfer succeeded."] }, Variant { name: "BalanceSet", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("free"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 3, docs: ["A balance was set by root."] }, Variant { name: "Reserved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 4, docs: ["Some balance was reserved (moved from free to reserved)."] }, Variant { name: "Unreserved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 5, docs: ["Some balance was unreserved (moved from reserved to free)."] }, Variant { name: "ReserveRepatriated", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("destination_status"), ty: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Status"), docs: [] }], index: 6, docs: ["Some balance was moved from the reserve of the first account to the second account.", "Final argument indicates the destination balance type."] }, Variant { name: "Deposit", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 7, docs: ["Some amount was deposited (e.g. for transaction fees)."] }, Variant { name: "Withdraw", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 8, docs: ["Some amount was withdrawn from the account (e.g. for transaction fees)."] }, Variant { name: "Slashed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 9, docs: ["Some amount was removed from the account (e.g. for misbehavior)."] }, Variant { name: "Minted", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 10, docs: ["Some amount was minted into an account."] }, Variant { name: "Burned", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 11, docs: ["Some amount was burned from an account."] }, Variant { name: "Suspended", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 12, docs: ["Some amount was suspended from an account (it can be restored later)."] }, Variant { name: "Restored", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 13, docs: ["Some amount was restored into an account."] }, Variant { name: "Upgraded", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 14, docs: ["An account was upgraded."] }, Variant { name: "Issued", fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 15, docs: ["Total issuance was increased by `amount`, creating a credit to be balanced."] }, Variant { name: "Rescinded", fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 16, docs: ["Total issuance was decreased by `amount`, creating a debt to be balanced."] }, Variant { name: "Locked", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 17, docs: ["Some balance was locked."] }, Variant { name: "Unlocked", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 18, docs: ["Some balance was unlocked."] }, Variant { name: "Frozen", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 19, docs: ["Some balance was frozen."] }, Variant { name: "Thawed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 20, docs: ["Some balance was thawed."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 34, ty: Type { path: Path { segments: ["frame_support", "traits", "tokens", "misc", "BalanceStatus"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Free", fields: [], index: 0, docs: [] }, Variant { name: "Reserved", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 35, ty: Type { path: Path { segments: ["pallet_transaction_payment", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "TransactionFeePaid", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("actual_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("tip"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 0, docs: ["A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,", "has been paid by `who`."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 36, ty: Type { path: Path { segments: ["pallet_sudo", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Sudid", fields: [Field { name: Some("sudo_result"), ty: UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: ["The result of the call made by the sudo user."] }], index: 0, docs: ["A sudo call just took place."] }, Variant { name: "KeyChanged", fields: [Field { name: Some("old_sudoer"), ty: UntrackedSymbol { id: 37, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: ["The old sudo key if one was previously set."] }], index: 1, docs: ["The sudo key has been updated."] }, Variant { name: "SudoAsDone", fields: [Field { name: Some("sudo_result"), ty: UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: ["The result of the call made by the sudo user."] }], index: 2, docs: ["A [sudo_as](Pallet::sudo_as) call just took place."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 37, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 38, ty: Type { path: Path { segments: ["pallet_contracts", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Instantiated", fields: [Field { name: Some("deployer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: ["Contract deployed by address at the specified address."] }, Variant { name: "Terminated", fields: [Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that was terminated."] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account that received the contracts remaining balance"] }], index: 1, docs: ["Contract has been removed.", "", "# Note", "", "The only way for a contract to be removed and emitting this event is by calling", "`seal_terminate`."] }, Variant { name: "CodeStored", fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("deposit_held"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("uploader"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 2, docs: ["Code with the specified hash has been stored."] }, Variant { name: "ContractEmitted", fields: [Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that emitted the event."] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: ["Data supplied by the contract. Metadata generated during contract compilation", "is needed to decode it."] }], index: 3, docs: ["A custom event emitted by the contract."] }, Variant { name: "CodeRemoved", fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("deposit_released"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("remover"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 4, docs: ["A code with the specified hash was removed."] }, Variant { name: "ContractCodeUpdated", fields: [Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that has been updated."] }, Field { name: Some("new_code_hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: ["New code hash that was set for the contract."] }, Field { name: Some("old_code_hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: ["Previous code hash of the contract."] }], index: 5, docs: ["A contract's code was updated."] }, Variant { name: "Called", fields: [Field { name: Some("caller"), ty: UntrackedSymbol { id: 39, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Origin<T>"), docs: ["The caller of the `contract`."] }, Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that was called."] }], index: 6, docs: ["A contract was called either by a plain account or another contract.", "", "# Note", "", "Please keep in mind that like all events this is only emitted for successful", "calls. This is because on failure all storage changes including events are", "rolled back."] }, Variant { name: "DelegateCalled", fields: [Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that performed the delegate call and hence in whose context", "the `code_hash` is executed."] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: ["The code hash that was delegate called."] }], index: 7, docs: ["A contract delegate called a code hash.", "", "# Note", "", "Please keep in mind that like all events this is only emitted for successful", "calls. This is because on failure all storage changes including events are", "rolled back."] }, Variant { name: "StorageDepositTransferredAndHeld", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 8, docs: ["Some funds have been transferred and held as storage deposit."] }, Variant { name: "StorageDepositTransferredAndReleased", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 9, docs: ["Some storage deposit funds have been transferred and released."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 39, ty: Type { path: Path { segments: ["pallet_contracts", "Origin"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 40, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Root", fields: [], index: 0, docs: [] }, Variant { name: "Signed", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 40, ty: Type { path: Path { segments: ["contracts_node_runtime", "Runtime"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 41, ty: Type { path: Path { segments: ["pallet_assets", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Created", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("creator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: ["Some asset class was created."] }, Variant { name: "Issued", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 1, docs: ["Some assets were issued."] }, Variant { name: "Transferred", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 2, docs: ["Some assets were transferred."] }, Variant { name: "Burned", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 3, docs: ["Some assets were destroyed."] }, Variant { name: "TeamChanged", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("issuer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("freezer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 4, docs: ["The management team changed."] }, Variant { name: "OwnerChanged", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 5, docs: ["The owner changed."] }, Variant { name: "Frozen", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 6, docs: ["Some account `who` was frozen."] }, Variant { name: "Thawed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 7, docs: ["Some account `who` was thawed."] }, Variant { name: "AssetFrozen", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], index: 8, docs: ["Some asset `asset_id` was frozen."] }, Variant { name: "AssetThawed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], index: 9, docs: ["Some asset `asset_id` was thawed."] }, Variant { name: "AccountsDestroyed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("accounts_destroyed"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("accounts_remaining"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 10, docs: ["Accounts were destroyed for given asset."] }, Variant { name: "ApprovalsDestroyed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("approvals_destroyed"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("approvals_remaining"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 11, docs: ["Approvals were destroyed for given asset."] }, Variant { name: "DestructionStarted", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], index: 12, docs: ["An asset class is in the process of being destroyed."] }, Variant { name: "Destroyed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], index: 13, docs: ["An asset class was destroyed."] }, Variant { name: "ForceCreated", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 14, docs: ["Some asset class was force-created."] }, Variant { name: "MetadataSet", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("symbol"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("decimals"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("is_frozen"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 15, docs: ["New metadata has been set for an asset."] }, Variant { name: "MetadataCleared", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], index: 16, docs: ["Metadata has been cleared for an asset."] }, Variant { name: "ApprovedTransfer", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("source"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 17, docs: ["(Additional) funds have been approved for transfer to a destination account."] }, Variant { name: "ApprovalCancelled", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 18, docs: ["An approval for account `delegate` was cancelled by `owner`."] }, Variant { name: "TransferredApproved", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 19, docs: ["An `amount` was transferred in its entirety from `owner` to `destination` by", "the approved `delegate`."] }, Variant { name: "AssetStatusChanged", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], index: 20, docs: ["An asset has had its attributes changed by the `Force` origin."] }, Variant { name: "AssetMinBalanceChanged", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("new_min_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 21, docs: ["The min_balance of an asset has been updated by the asset owner."] }, Variant { name: "Touched", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("depositor"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 22, docs: ["Some account `who` was created with a deposit from `depositor`."] }, Variant { name: "Blocked", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 23, docs: ["Some account `who` was blocked."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 42, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(Bool), docs: [] } }, PortableType { id: 43, ty: Type { path: Path { segments: ["frame_system", "Phase"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ApplyExtrinsic", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: [] }, Variant { name: "Finalization", fields: [], index: 1, docs: [] }, Variant { name: "Initialization", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 44, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 45, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 46, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 47, ty: Type { path: Path { segments: ["frame_system", "LastRuntimeUpgradeInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("spec_version"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("codec::Compact<u32>"), docs: [] }, Field { name: Some("spec_name"), ty: UntrackedSymbol { id: 49, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sp_runtime::RuntimeString"), docs: [] }] }), docs: [] } }, PortableType { id: 48, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 49, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(Str), docs: [] } }, PortableType { id: 50, ty: Type { path: Path { segments: ["frame_system", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "remark", fields: [Field { name: Some("remark"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["See [`Pallet::remark`]."] }, Variant { name: "set_heap_pages", fields: [Field { name: Some("pages"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 1, docs: ["See [`Pallet::set_heap_pages`]."] }, Variant { name: "set_code", fields: [Field { name: Some("code"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 2, docs: ["See [`Pallet::set_code`]."] }, Variant { name: "set_code_without_checks", fields: [Field { name: Some("code"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 3, docs: ["See [`Pallet::set_code_without_checks`]."] }, Variant { name: "set_storage", fields: [Field { name: Some("items"), ty: UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<KeyValue>"), docs: [] }], index: 4, docs: ["See [`Pallet::set_storage`]."] }, Variant { name: "kill_storage", fields: [Field { name: Some("keys"), ty: UntrackedSymbol { id: 53, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Key>"), docs: [] }], index: 5, docs: ["See [`Pallet::kill_storage`]."] }, Variant { name: "kill_prefix", fields: [Field { name: Some("prefix"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Key"), docs: [] }, Field { name: Some("subkeys"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 6, docs: ["See [`Pallet::kill_prefix`]."] }, Variant { name: "remark_with_event", fields: [Field { name: Some("remark"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 7, docs: ["See [`Pallet::remark_with_event`]."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 51, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 52, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 52, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 53, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 54, ty: Type { path: Path { segments: ["frame_system", "limits", "BlockWeights"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("base_block"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("max_block"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("per_class"), ty: UntrackedSymbol { id: 55, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PerDispatchClass<WeightsPerClass>"), docs: [] }] }), docs: [] } }, PortableType { id: 55, ty: Type { path: Path { segments: ["frame_support", "dispatch", "PerDispatchClass"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 56, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("normal"), ty: UntrackedSymbol { id: 56, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("operational"), ty: UntrackedSymbol { id: 56, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("mandatory"), ty: UntrackedSymbol { id: 56, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }] }), docs: [] } }, PortableType { id: 56, ty: Type { path: Path { segments: ["frame_system", "limits", "WeightsPerClass"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("base_extrinsic"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("max_extrinsic"), ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Weight>"), docs: [] }, Field { name: Some("max_total"), ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Weight>"), docs: [] }, Field { name: Some("reserved"), ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Weight>"), docs: [] }] }), docs: [] } }, PortableType { id: 57, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 58, ty: Type { path: Path { segments: ["frame_system", "limits", "BlockLength"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("max"), ty: UntrackedSymbol { id: 59, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PerDispatchClass<u32>"), docs: [] }] }), docs: [] } }, PortableType { id: 59, ty: Type { path: Path { segments: ["frame_support", "dispatch", "PerDispatchClass"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("normal"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("operational"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("mandatory"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }] }), docs: [] } }, PortableType { id: 60, ty: Type { path: Path { segments: ["sp_weights", "RuntimeDbWeight"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("read"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("write"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 61, ty: Type { path: Path { segments: ["sp_version", "RuntimeVersion"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("spec_name"), ty: UntrackedSymbol { id: 49, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RuntimeString"), docs: [] }, Field { name: Some("impl_name"), ty: UntrackedSymbol { id: 49, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RuntimeString"), docs: [] }, Field { name: Some("authoring_version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("spec_version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("impl_version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("apis"), ty: UntrackedSymbol { id: 62, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ApisVec"), docs: [] }, Field { name: Some("transaction_version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("state_version"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }] }), docs: [] } }, PortableType { id: 62, ty: Type { path: Path { segments: ["Cow"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 63, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 64, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 64, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 65, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 8, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 66, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U16), docs: [] } }, PortableType { id: 67, ty: Type { path: Path { segments: ["frame_system", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidSpecName", fields: [], index: 0, docs: ["The name of specification does not match between the current runtime", "and the new runtime."] }, Variant { name: "SpecVersionNeedsToIncrease", fields: [], index: 1, docs: ["The specification version is not allowed to decrease between the current runtime", "and the new runtime."] }, Variant { name: "FailedToExtractRuntimeVersion", fields: [], index: 2, docs: ["Failed to extract the runtime version from the new runtime.", "", "Either calling `Core_version` or decoding `RuntimeVersion` failed."] }, Variant { name: "NonDefaultComposite", fields: [], index: 3, docs: ["Suicide called when the account has non-default composite data."] }, Variant { name: "NonZeroRefCount", fields: [], index: 4, docs: ["There is a non-zero reference count preventing the account from being purged."] }, Variant { name: "CallFiltered", fields: [], index: 5, docs: ["The origin filter prevent the call to be dispatched."] }] }), docs: ["Error for the System pallet"] } }, PortableType { id: 68, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 69, ty: Type { path: Path { segments: ["pallet_utility", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "batch", fields: [Field { name: Some("calls"), ty: UntrackedSymbol { id: 70, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<<T as Config>::RuntimeCall>"), docs: [] }], index: 0, docs: ["See [`Pallet::batch`]."] }, Variant { name: "as_derivative", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 66, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 71, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 1, docs: ["See [`Pallet::as_derivative`]."] }, Variant { name: "batch_all", fields: [Field { name: Some("calls"), ty: UntrackedSymbol { id: 70, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<<T as Config>::RuntimeCall>"), docs: [] }], index: 2, docs: ["See [`Pallet::batch_all`]."] }, Variant { name: "dispatch_as", fields: [Field { name: Some("as_origin"), ty: UntrackedSymbol { id: 84, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<T::PalletsOrigin>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 71, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 3, docs: ["See [`Pallet::dispatch_as`]."] }, Variant { name: "force_batch", fields: [Field { name: Some("calls"), ty: UntrackedSymbol { id: 70, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<<T as Config>::RuntimeCall>"), docs: [] }], index: 4, docs: ["See [`Pallet::force_batch`]."] }, Variant { name: "with_weight", fields: [Field { name: Some("call"), ty: UntrackedSymbol { id: 71, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }, Field { name: Some("weight"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 5, docs: ["See [`Pallet::with_weight`]."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 70, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 71, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 71, ty: Type { path: Path { segments: ["contracts_node_runtime", "RuntimeCall"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "System", fields: [Field { name: None, ty: UntrackedSymbol { id: 50, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Utility", fields: [Field { name: None, ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Timestamp", fields: [Field { name: None, ty: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"), docs: [] }], index: 3, docs: [] }, Variant { name: "Balances", fields: [Field { name: None, ty: UntrackedSymbol { id: 73, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"), docs: [] }], index: 4, docs: [] }, Variant { name: "Sudo", fields: [Field { name: None, ty: UntrackedSymbol { id: 79, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"), docs: [] }], index: 7, docs: [] }, Variant { name: "Contracts", fields: [Field { name: None, ty: UntrackedSymbol { id: 80, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Contracts, Runtime>"), docs: [] }], index: 8, docs: [] }, Variant { name: "Assets", fields: [Field { name: None, ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>"), docs: [] }], index: 9, docs: [] }] }), docs: [] } }, PortableType { id: 72, ty: Type { path: Path { segments: ["pallet_timestamp", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "set", fields: [Field { name: Some("now"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Moment"), docs: [] }], index: 0, docs: ["See [`Pallet::set`]."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 73, ty: Type { path: Path { segments: ["pallet_balances", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "transfer_allow_death", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 0, docs: ["See [`Pallet::transfer_allow_death`]."] }, Variant { name: "force_transfer", fields: [Field { name: Some("source"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 2, docs: ["See [`Pallet::force_transfer`]."] }, Variant { name: "transfer_keep_alive", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 3, docs: ["See [`Pallet::transfer_keep_alive`]."] }, Variant { name: "transfer_all", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("keep_alive"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 4, docs: ["See [`Pallet::transfer_all`]."] }, Variant { name: "force_unreserve", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 5, docs: ["See [`Pallet::force_unreserve`]."] }, Variant { name: "upgrade_accounts", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }], index: 6, docs: ["See [`Pallet::upgrade_accounts`]."] }, Variant { name: "force_set_balance", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("new_free"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 8, docs: ["See [`Pallet::force_set_balance`]."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 74, ty: Type { path: Path { segments: ["sp_runtime", "multiaddress", "MultiAddress"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountIndex", ty: Some(UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Id", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 0, docs: [] }, Variant { name: "Index", fields: [Field { name: None, ty: UntrackedSymbol { id: 75, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIndex"), docs: [] }], index: 1, docs: [] }, Variant { name: "Raw", fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Address32", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 3, docs: [] }, Variant { name: "Address20", fields: [Field { name: None, ty: UntrackedSymbol { id: 76, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 20]"), docs: [] }], index: 4, docs: [] }] }), docs: [] } }, PortableType { id: 75, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 76, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 20, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 77, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 78, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 79, ty: Type { path: Path { segments: ["pallet_sudo", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "sudo", fields: [Field { name: Some("call"), ty: UntrackedSymbol { id: 71, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 0, docs: ["See [`Pallet::sudo`]."] }, Variant { name: "sudo_unchecked_weight", fields: [Field { name: Some("call"), ty: UntrackedSymbol { id: 71, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }, Field { name: Some("weight"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 1, docs: ["See [`Pallet::sudo_unchecked_weight`]."] }, Variant { name: "set_key", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 2, docs: ["See [`Pallet::set_key`]."] }, Variant { name: "sudo_as", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 71, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 3, docs: ["See [`Pallet::sudo_as`]."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 80, ty: Type { path: Path { segments: ["pallet_contracts", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "call_old_weight", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 81, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["See [`Pallet::call_old_weight`]."] }, Variant { name: "instantiate_with_code_old_weight", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 81, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("code"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 1, docs: ["See [`Pallet::instantiate_with_code_old_weight`]."] }, Variant { name: "instantiate_old_weight", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 81, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 2, docs: ["See [`Pallet::instantiate_old_weight`]."] }, Variant { name: "upload_code", fields: [Field { name: Some("code"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 81, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("determinism"), ty: UntrackedSymbol { id: 82, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Determinism"), docs: [] }], index: 3, docs: ["See [`Pallet::upload_code`]."] }, Variant { name: "remove_code", fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }], index: 4, docs: ["See [`Pallet::remove_code`]."] }, Variant { name: "set_code", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }], index: 5, docs: ["See [`Pallet::set_code`]."] }, Variant { name: "call", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 81, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 6, docs: ["See [`Pallet::call`]."] }, Variant { name: "instantiate_with_code", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 81, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("code"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 7, docs: ["See [`Pallet::instantiate_with_code`]."] }, Variant { name: "instantiate", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 81, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 8, docs: ["See [`Pallet::instantiate`]."] }, Variant { name: "migrate", fields: [Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 9, docs: ["See [`Pallet::migrate`]."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 81, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 82, ty: Type { path: Path { segments: ["pallet_contracts", "wasm", "Determinism"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Enforced", fields: [], index: 0, docs: [] }, Variant { name: "Relaxed", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 83, ty: Type { path: Path { segments: ["pallet_assets", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "create", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("min_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 0, docs: ["See [`Pallet::create`]."] }, Variant { name: "force_create", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("is_sufficient"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("min_balance"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 1, docs: ["See [`Pallet::force_create`]."] }, Variant { name: "start_destroy", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 2, docs: ["See [`Pallet::start_destroy`]."] }, Variant { name: "destroy_accounts", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 3, docs: ["See [`Pallet::destroy_accounts`]."] }, Variant { name: "destroy_approvals", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 4, docs: ["See [`Pallet::destroy_approvals`]."] }, Variant { name: "finish_destroy", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 5, docs: ["See [`Pallet::finish_destroy`]."] }, Variant { name: "mint", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 6, docs: ["See [`Pallet::mint`]."] }, Variant { name: "burn", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 7, docs: ["See [`Pallet::burn`]."] }, Variant { name: "transfer", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 8, docs: ["See [`Pallet::transfer`]."] }, Variant { name: "transfer_keep_alive", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 9, docs: ["See [`Pallet::transfer_keep_alive`]."] }, Variant { name: "force_transfer", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("source"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 10, docs: ["See [`Pallet::force_transfer`]."] }, Variant { name: "freeze", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 11, docs: ["See [`Pallet::freeze`]."] }, Variant { name: "thaw", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 12, docs: ["See [`Pallet::thaw`]."] }, Variant { name: "freeze_asset", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 13, docs: ["See [`Pallet::freeze_asset`]."] }, Variant { name: "thaw_asset", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 14, docs: ["See [`Pallet::thaw_asset`]."] }, Variant { name: "transfer_ownership", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 15, docs: ["See [`Pallet::transfer_ownership`]."] }, Variant { name: "set_team", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("issuer"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("freezer"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 16, docs: ["See [`Pallet::set_team`]."] }, Variant { name: "set_metadata", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("symbol"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("decimals"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 17, docs: ["See [`Pallet::set_metadata`]."] }, Variant { name: "clear_metadata", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 18, docs: ["See [`Pallet::clear_metadata`]."] }, Variant { name: "force_set_metadata", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("symbol"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("decimals"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("is_frozen"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 19, docs: ["See [`Pallet::force_set_metadata`]."] }, Variant { name: "force_clear_metadata", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 20, docs: ["See [`Pallet::force_clear_metadata`]."] }, Variant { name: "force_asset_status", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("issuer"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("freezer"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("min_balance"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("is_sufficient"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("is_frozen"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 21, docs: ["See [`Pallet::force_asset_status`]."] }, Variant { name: "approve_transfer", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 22, docs: ["See [`Pallet::approve_transfer`]."] }, Variant { name: "cancel_approval", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 23, docs: ["See [`Pallet::cancel_approval`]."] }, Variant { name: "force_cancel_approval", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 24, docs: ["See [`Pallet::force_cancel_approval`]."] }, Variant { name: "transfer_approved", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 25, docs: ["See [`Pallet::transfer_approved`]."] }, Variant { name: "touch", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 26, docs: ["See [`Pallet::touch`]."] }, Variant { name: "refund", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("allow_burn"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 27, docs: ["See [`Pallet::refund`]."] }, Variant { name: "set_min_balance", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("min_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 28, docs: ["See [`Pallet::set_min_balance`]."] }, Variant { name: "touch_other", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 29, docs: ["See [`Pallet::touch_other`]."] }, Variant { name: "refund_other", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 30, docs: ["See [`Pallet::refund_other`]."] }, Variant { name: "block", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 31, docs: ["See [`Pallet::block`]."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 84, ty: Type { path: Path { segments: ["contracts_node_runtime", "OriginCaller"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "system", fields: [Field { name: None, ty: UntrackedSymbol { id: 85, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("frame_system::Origin<Runtime>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Void", fields: [Field { name: None, ty: UntrackedSymbol { id: 86, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 85, ty: Type { path: Path { segments: ["frame_support", "dispatch", "RawOrigin"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Root", fields: [], index: 0, docs: [] }, Variant { name: "Signed", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 1, docs: [] }, Variant { name: "None", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 86, ty: Type { path: Path { segments: ["sp_core", "Void"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [] }), docs: [] } }, PortableType { id: 87, ty: Type { path: Path { segments: ["pallet_utility", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "TooManyCalls", fields: [], index: 0, docs: ["Too many calls batched."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 88, ty: Type { path: Path { segments: ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 89, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 91, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 89, ty: Type { path: Path { segments: ["pallet_balances", "types", "BalanceLock"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LockIdentifier"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("reasons"), ty: UntrackedSymbol { id: 90, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Reasons"), docs: [] }] }), docs: [] } }, PortableType { id: 90, ty: Type { path: Path { segments: ["pallet_balances", "types", "Reasons"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Fee", fields: [], index: 0, docs: [] }, Variant { name: "Misc", fields: [], index: 1, docs: [] }, Variant { name: "All", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 91, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 89, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 92, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 93, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 93, ty: Type { path: Path { segments: ["pallet_balances", "types", "ReserveData"] }, type_params: [TypeParameter { name: "ReserveIdentifier", ty: Some(UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReserveIdentifier"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 94, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 93, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 95, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 99, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 96, ty: Type { path: Path { segments: ["pallet_balances", "types", "IdAmount"] }, type_params: [TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 97, ty: Type { path: Path { segments: ["contracts_node_runtime", "RuntimeHoldReason"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Contracts", fields: [Field { name: None, ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_contracts::HoldReason"), docs: [] }], index: 8, docs: [] }] }), docs: [] } }, PortableType { id: 98, ty: Type { path: Path { segments: ["pallet_contracts", "pallet", "HoldReason"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "CodeUploadDepositReserve", fields: [], index: 0, docs: [] }, Variant { name: "StorageDepositReserve", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 99, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 100, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 102, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 101, ty: Type { path: Path { segments: ["pallet_balances", "types", "IdAmount"] }, type_params: [TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 102, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 103, ty: Type { path: Path { segments: ["pallet_balances", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "VestingBalance", fields: [], index: 0, docs: ["Vesting balance too high to send value."] }, Variant { name: "LiquidityRestrictions", fields: [], index: 1, docs: ["Account liquidity restrictions prevent withdrawal."] }, Variant { name: "InsufficientBalance", fields: [], index: 2, docs: ["Balance too low to send value."] }, Variant { name: "ExistentialDeposit", fields: [], index: 3, docs: ["Value too low to create account due to existential deposit."] }, Variant { name: "Expendability", fields: [], index: 4, docs: ["Transfer/payment would kill account."] }, Variant { name: "ExistingVestingSchedule", fields: [], index: 5, docs: ["A vesting schedule already exists for this account."] }, Variant { name: "DeadAccount", fields: [], index: 6, docs: ["Beneficiary account must pre-exist."] }, Variant { name: "TooManyReserves", fields: [], index: 7, docs: ["Number of named reserves exceed `MaxReserves`."] }, Variant { name: "TooManyHolds", fields: [], index: 8, docs: ["Number of holds exceed `MaxHolds`."] }, Variant { name: "TooManyFreezes", fields: [], index: 9, docs: ["Number of freezes exceed `MaxFreezes`."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 104, ty: Type { path: Path { segments: ["sp_arithmetic", "fixed_point", "FixedU128"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }] }), docs: [] } }, PortableType { id: 105, ty: Type { path: Path { segments: ["pallet_transaction_payment", "Releases"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V1Ancient", fields: [], index: 0, docs: [] }, Variant { name: "V2", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 106, ty: Type { path: Path { segments: ["pallet_sudo", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "RequireSudo", fields: [], index: 0, docs: ["Sender must be the Sudo account"] }] }), docs: ["Error for the Sudo pallet"] } }, PortableType { id: 107, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 108, ty: Type { path: Path { segments: ["pallet_contracts", "wasm", "CodeInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdOf<T>"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("refcount"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("determinism"), ty: UntrackedSymbol { id: 82, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Determinism"), docs: [] }, Field { name: Some("code_len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 109, ty: Type { path: Path { segments: ["pallet_contracts", "storage", "ContractInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("trie_id"), ty: UntrackedSymbol { id: 110, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TrieId"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }, Field { name: Some("storage_bytes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("storage_items"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("storage_byte_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("storage_item_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("storage_base_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("delegate_dependencies"), ty: UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedBTreeMap<CodeHash<T>, BalanceOf<T>, T::\nMaxDelegateDependencies>"), docs: [] }] }), docs: [] } }, PortableType { id: 110, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 111, ty: Type { path: Path { segments: ["bounded_collections", "bounded_btree_map", "BoundedBTreeMap"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 112, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BTreeMap<K, V>"), docs: [] }] }), docs: [] } }, PortableType { id: 112, ty: Type { path: Path { segments: ["BTreeMap"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 113, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 114, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 115, ty: Type { path: Path { segments: ["pallet_contracts", "storage", "DeletionQueueManager"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("insert_counter"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("delete_counter"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 116, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 117, ty: Type { path: Path { segments: ["pallet_contracts", "schedule", "Schedule"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("limits"), ty: UntrackedSymbol { id: 118, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Limits"), docs: [] }, Field { name: Some("instruction_weights"), ty: UntrackedSymbol { id: 119, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InstructionWeights<T>"), docs: [] }, Field { name: Some("host_fn_weights"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HostFnWeights<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 118, ty: Type { path: Path { segments: ["pallet_contracts", "schedule", "Limits"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("event_topics"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("globals"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("locals"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("parameters"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("memory_pages"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("table_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("br_table_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("subject_len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("payload_len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("runtime_memory"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 119, ty: Type { path: Path { segments: ["pallet_contracts", "schedule", "InstructionWeights"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("base"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 120, ty: Type { path: Path { segments: ["pallet_contracts", "schedule", "HostFnWeights"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("caller"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("is_contract"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("own_code_hash"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("caller_is_origin"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("caller_is_root"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("address"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("gas_left"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("balance"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("value_transferred"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("minimum_balance"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("block_number"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("now"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("weight_to_fee"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("input"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("input_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("r#return"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("return_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("terminate"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("random"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("deposit_event"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("deposit_event_per_topic"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("deposit_event_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("debug_message"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("debug_message_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("set_storage"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("set_storage_per_new_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("set_storage_per_old_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("set_code_hash"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("clear_storage"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("clear_storage_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("contains_storage"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("contains_storage_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("get_storage"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("get_storage_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("take_storage"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("take_storage_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("transfer"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("delegate_call"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("call_transfer_surcharge"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("call_per_cloned_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("instantiate"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("instantiate_transfer_surcharge"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("instantiate_per_input_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("instantiate_per_salt_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("hash_sha2_256"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("hash_sha2_256_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("hash_keccak_256"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("hash_keccak_256_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("hash_blake2_256"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("hash_blake2_256_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("hash_blake2_128"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("hash_blake2_128_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("ecdsa_recover"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("ecdsa_to_eth_address"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("sr25519_verify"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("sr25519_verify_per_byte"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("reentrance_count"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("account_reentrance_count"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("instantiation_nonce"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("add_delegate_dependency"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("remove_delegate_dependency"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }] }), docs: [] } }, PortableType { id: 121, ty: Type { path: Path { segments: ["sp_arithmetic", "per_things", "Perbill"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 122, ty: Type { path: Path { segments: ["pallet_contracts", "Environment"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("account_id"), ty: UntrackedSymbol { id: 123, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EnvironmentType<AccountIdOf<T>>"), docs: [] }, Field { name: Some("balance"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EnvironmentType<BalanceOf<T>>"), docs: [] }, Field { name: Some("hash"), ty: UntrackedSymbol { id: 125, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EnvironmentType<<T as frame_system::Config>::Hash>"), docs: [] }, Field { name: Some("hasher"), ty: UntrackedSymbol { id: 126, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EnvironmentType<<T as frame_system::Config>::Hashing>"), docs: [] }, Field { name: Some("timestamp"), ty: UntrackedSymbol { id: 128, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EnvironmentType<MomentOf<T>>"), docs: [] }, Field { name: Some("block_number"), ty: UntrackedSymbol { id: 129, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EnvironmentType<BlockNumberFor<T>>"), docs: [] }] }), docs: [] } }, PortableType { id: 123, ty: Type { path: Path { segments: ["pallet_contracts", "EnvironmentType"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 124, ty: Type { path: Path { segments: ["pallet_contracts", "EnvironmentType"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 125, ty: Type { path: Path { segments: ["pallet_contracts", "EnvironmentType"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 126, ty: Type { path: Path { segments: ["pallet_contracts", "EnvironmentType"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 127, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 127, ty: Type { path: Path { segments: ["sp_runtime", "traits", "BlakeTwo256"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 128, ty: Type { path: Path { segments: ["pallet_contracts", "EnvironmentType"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 129, ty: Type { path: Path { segments: ["pallet_contracts", "EnvironmentType"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 130, ty: Type { path: Path { segments: ["pallet_contracts", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidSchedule", fields: [], index: 0, docs: ["Invalid schedule supplied, e.g. with zero weight of a basic operation."] }, Variant { name: "InvalidCallFlags", fields: [], index: 1, docs: ["Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`."] }, Variant { name: "OutOfGas", fields: [], index: 2, docs: ["The executed contract exhausted its gas limit."] }, Variant { name: "OutputBufferTooSmall", fields: [], index: 3, docs: ["The output buffer supplied to a contract API call was too small."] }, Variant { name: "TransferFailed", fields: [], index: 4, docs: ["Performing the requested transfer failed. Probably because there isn't enough", "free balance in the sender's account."] }, Variant { name: "MaxCallDepthReached", fields: [], index: 5, docs: ["Performing a call was denied because the calling depth reached the limit", "of what is specified in the schedule."] }, Variant { name: "ContractNotFound", fields: [], index: 6, docs: ["No contract was found at the specified address."] }, Variant { name: "CodeTooLarge", fields: [], index: 7, docs: ["The code supplied to `instantiate_with_code` exceeds the limit specified in the", "current schedule."] }, Variant { name: "CodeNotFound", fields: [], index: 8, docs: ["No code could be found at the supplied code hash."] }, Variant { name: "CodeInfoNotFound", fields: [], index: 9, docs: ["No code info could be found at the supplied code hash."] }, Variant { name: "OutOfBounds", fields: [], index: 10, docs: ["A buffer outside of sandbox memory was passed to a contract API function."] }, Variant { name: "DecodingFailed", fields: [], index: 11, docs: ["Input passed to a contract API function failed to decode as expected type."] }, Variant { name: "ContractTrapped", fields: [], index: 12, docs: ["Contract trapped during execution."] }, Variant { name: "ValueTooLarge", fields: [], index: 13, docs: ["The size defined in `T::MaxValueSize` was exceeded."] }, Variant { name: "TerminatedWhileReentrant", fields: [], index: 14, docs: ["Termination of a contract is not allowed while the contract is already", "on the call stack. Can be triggered by `seal_terminate`."] }, Variant { name: "InputForwarded", fields: [], index: 15, docs: ["`seal_call` forwarded this contracts input. It therefore is no longer available."] }, Variant { name: "RandomSubjectTooLong", fields: [], index: 16, docs: ["The subject passed to `seal_random` exceeds the limit."] }, Variant { name: "TooManyTopics", fields: [], index: 17, docs: ["The amount of topics passed to `seal_deposit_events` exceeds the limit."] }, Variant { name: "NoChainExtension", fields: [], index: 18, docs: ["The chain does not provide a chain extension. Calling the chain extension results", "in this error. Note that this usually  shouldn't happen as deploying such contracts", "is rejected."] }, Variant { name: "DuplicateContract", fields: [], index: 19, docs: ["A contract with the same AccountId already exists."] }, Variant { name: "TerminatedInConstructor", fields: [], index: 20, docs: ["A contract self destructed in its constructor.", "", "This can be triggered by a call to `seal_terminate`."] }, Variant { name: "ReentranceDenied", fields: [], index: 21, docs: ["A call tried to invoke a contract that is flagged as non-reentrant.", "The only other cause is that a call from a contract into the runtime tried to call back", "into `pallet-contracts`. This would make the whole pallet reentrant with regard to", "contract code execution which is not supported."] }, Variant { name: "StorageDepositNotEnoughFunds", fields: [], index: 22, docs: ["Origin doesn't have enough balance to pay the required storage deposits."] }, Variant { name: "StorageDepositLimitExhausted", fields: [], index: 23, docs: ["More storage was created than allowed by the storage deposit limit."] }, Variant { name: "CodeInUse", fields: [], index: 24, docs: ["Code removal was denied because the code is still in use by at least one contract."] }, Variant { name: "ContractReverted", fields: [], index: 25, docs: ["The contract ran to completion but decided to revert its storage changes.", "Please note that this error is only returned from extrinsics. When called directly", "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags", "to determine whether a reversion has taken place."] }, Variant { name: "CodeRejected", fields: [], index: 26, docs: ["The contract's code was found to be invalid during validation.", "", "The most likely cause of this is that an API was used which is not supported by the", "node. This happens if an older node is used with a new version of ink!. Try updating", "your node to the newest available version.", "", "A more detailed error can be found on the node console if debug messages are enabled", "by supplying `-lruntime::contracts=debug`."] }, Variant { name: "Indeterministic", fields: [], index: 27, docs: ["An indetermistic code was used in a context where this is not permitted."] }, Variant { name: "MigrationInProgress", fields: [], index: 28, docs: ["A pending migration needs to complete before the extrinsic can be called."] }, Variant { name: "NoMigrationPerformed", fields: [], index: 29, docs: ["Migrate dispatch call was attempted but no migration was performed."] }, Variant { name: "MaxDelegateDependenciesReached", fields: [], index: 30, docs: ["The contract has reached its maximum number of delegate dependencies."] }, Variant { name: "DelegateDependencyNotFound", fields: [], index: 31, docs: ["The dependency was not found in the contract's delegate dependencies."] }, Variant { name: "DelegateDependencyAlreadyExists", fields: [], index: 32, docs: ["The contract already depends on the given delegate dependency."] }, Variant { name: "CannotAddSelfAsDelegateDependency", fields: [], index: 33, docs: ["Can not add a delegate dependency to the code hash of the contract itself."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 131, ty: Type { path: Path { segments: ["pallet_assets", "types", "AssetDetails"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "DepositBalance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("issuer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("freezer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("supply"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DepositBalance"), docs: [] }, Field { name: Some("min_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("is_sufficient"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("accounts"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("sufficients"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("approvals"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("status"), ty: UntrackedSymbol { id: 132, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetStatus"), docs: [] }] }), docs: [] } }, PortableType { id: 132, ty: Type { path: Path { segments: ["pallet_assets", "types", "AssetStatus"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Live", fields: [], index: 0, docs: [] }, Variant { name: "Frozen", fields: [], index: 1, docs: [] }, Variant { name: "Destroying", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 133, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 134, ty: Type { path: Path { segments: ["pallet_assets", "types", "AssetAccount"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "DepositBalance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Extra", ty: Some(UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("status"), ty: UntrackedSymbol { id: 135, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountStatus"), docs: [] }, Field { name: Some("reason"), ty: UntrackedSymbol { id: 136, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExistenceReason<DepositBalance, AccountId>"), docs: [] }, Field { name: Some("extra"), ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Extra"), docs: [] }] }), docs: [] } }, PortableType { id: 135, ty: Type { path: Path { segments: ["pallet_assets", "types", "AccountStatus"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Liquid", fields: [], index: 0, docs: [] }, Variant { name: "Frozen", fields: [], index: 1, docs: [] }, Variant { name: "Blocked", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 136, ty: Type { path: Path { segments: ["pallet_assets", "types", "ExistenceReason"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Consumer", fields: [], index: 0, docs: [] }, Variant { name: "Sufficient", fields: [], index: 1, docs: [] }, Variant { name: "DepositHeld", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 2, docs: [] }, Variant { name: "DepositRefunded", fields: [], index: 3, docs: [] }, Variant { name: "DepositFrom", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 4, docs: [] }] }), docs: [] } }, PortableType { id: 137, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 138, ty: Type { path: Path { segments: ["pallet_assets", "types", "Approval"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "DepositBalance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DepositBalance"), docs: [] }] }), docs: [] } }, PortableType { id: 139, ty: Type { path: Path { segments: ["pallet_assets", "types", "AssetMetadata"] }, type_params: [TypeParameter { name: "DepositBalance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BoundedString", ty: Some(UntrackedSymbol { id: 140, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DepositBalance"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 140, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedString"), docs: [] }, Field { name: Some("symbol"), ty: UntrackedSymbol { id: 140, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedString"), docs: [] }, Field { name: Some("decimals"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("is_frozen"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }), docs: [] } }, PortableType { id: 140, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 141, ty: Type { path: Path { segments: ["pallet_assets", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BalanceLow", fields: [], index: 0, docs: ["Account balance must be greater than or equal to the transfer amount."] }, Variant { name: "NoAccount", fields: [], index: 1, docs: ["The account to alter does not exist."] }, Variant { name: "NoPermission", fields: [], index: 2, docs: ["The signing account has no permission to do the operation."] }, Variant { name: "Unknown", fields: [], index: 3, docs: ["The given asset ID is unknown."] }, Variant { name: "Frozen", fields: [], index: 4, docs: ["The origin account is frozen."] }, Variant { name: "InUse", fields: [], index: 5, docs: ["The asset ID is already taken."] }, Variant { name: "BadWitness", fields: [], index: 6, docs: ["Invalid witness data given."] }, Variant { name: "MinBalanceZero", fields: [], index: 7, docs: ["Minimum balance should be non-zero."] }, Variant { name: "UnavailableConsumer", fields: [], index: 8, docs: ["Unable to increment the consumer reference counters on the account. Either no provider", "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one", "fewer then the maximum number of consumers has been reached."] }, Variant { name: "BadMetadata", fields: [], index: 9, docs: ["Invalid metadata given."] }, Variant { name: "Unapproved", fields: [], index: 10, docs: ["No approval exists that would allow the transfer."] }, Variant { name: "WouldDie", fields: [], index: 11, docs: ["The source account would not survive the transfer and it needs to stay alive."] }, Variant { name: "AlreadyExists", fields: [], index: 12, docs: ["The asset-account already exists."] }, Variant { name: "NoDeposit", fields: [], index: 13, docs: ["The asset-account doesn't have an associated deposit."] }, Variant { name: "WouldBurn", fields: [], index: 14, docs: ["The operation would result in funds being burned."] }, Variant { name: "LiveAsset", fields: [], index: 15, docs: ["The asset is a live asset and is actively being used. Usually emit for operations such", "as `start_destroy` which require the asset to be in a destroying state."] }, Variant { name: "AssetNotLive", fields: [], index: 16, docs: ["The asset is not live, and likely being destroyed."] }, Variant { name: "IncorrectStatus", fields: [], index: 17, docs: ["The asset status is not the expected status."] }, Variant { name: "NotFrozen", fields: [], index: 18, docs: ["The asset should be frozen before the given operation."] }, Variant { name: "CallbackFailed", fields: [], index: 19, docs: ["Callback action resulted in error"] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 142, ty: Type { path: Path { segments: ["sp_runtime", "MultiSignature"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ed25519", fields: [Field { name: None, ty: UntrackedSymbol { id: 143, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ed25519::Signature"), docs: [] }], index: 0, docs: [] }, Variant { name: "Sr25519", fields: [Field { name: None, ty: UntrackedSymbol { id: 145, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Signature"), docs: [] }], index: 1, docs: [] }, Variant { name: "Ecdsa", fields: [Field { name: None, ty: UntrackedSymbol { id: 146, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ecdsa::Signature"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 143, ty: Type { path: Path { segments: ["sp_core", "ed25519", "Signature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 144, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 64]"), docs: [] }] }), docs: [] } }, PortableType { id: 144, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 64, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 145, ty: Type { path: Path { segments: ["sp_core", "sr25519", "Signature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 144, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 64]"), docs: [] }] }), docs: [] } }, PortableType { id: 146, ty: Type { path: Path { segments: ["sp_core", "ecdsa", "Signature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 147, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 65]"), docs: [] }] }), docs: [] } }, PortableType { id: 147, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 65, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 148, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 149, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 150, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 152, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 153, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 155, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 157, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 149, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_non_zero_sender", "CheckNonZeroSender"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 150, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_spec_version", "CheckSpecVersion"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 151, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_tx_version", "CheckTxVersion"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 152, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_genesis", "CheckGenesis"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 153, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_mortality", "CheckMortality"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 154, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Era"), docs: [] }] }), docs: [] } }, PortableType { id: 154, ty: Type { path: Path { segments: ["sp_runtime", "generic", "era", "Era"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Immortal", fields: [], index: 0, docs: [] }, Variant { name: "Mortal1", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }, Variant { name: "Mortal2", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 2, docs: [] }, Variant { name: "Mortal3", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 3, docs: [] }, Variant { name: "Mortal4", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 4, docs: [] }, Variant { name: "Mortal5", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 5, docs: [] }, Variant { name: "Mortal6", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 6, docs: [] }, Variant { name: "Mortal7", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 7, docs: [] }, Variant { name: "Mortal8", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 8, docs: [] }, Variant { name: "Mortal9", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 9, docs: [] }, Variant { name: "Mortal10", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 10, docs: [] }, Variant { name: "Mortal11", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 11, docs: [] }, Variant { name: "Mortal12", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 12, docs: [] }, Variant { name: "Mortal13", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 13, docs: [] }, Variant { name: "Mortal14", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 14, docs: [] }, Variant { name: "Mortal15", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 15, docs: [] }, Variant { name: "Mortal16", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 16, docs: [] }, Variant { name: "Mortal17", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 17, docs: [] }, Variant { name: "Mortal18", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 18, docs: [] }, Variant { name: "Mortal19", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 19, docs: [] }, Variant { name: "Mortal20", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 20, docs: [] }, Variant { name: "Mortal21", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 21, docs: [] }, Variant { name: "Mortal22", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 22, docs: [] }, Variant { name: "Mortal23", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 23, docs: [] }, Variant { name: "Mortal24", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 24, docs: [] }, Variant { name: "Mortal25", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 25, docs: [] }, Variant { name: "Mortal26", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 26, docs: [] }, Variant { name: "Mortal27", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 27, docs: [] }, Variant { name: "Mortal28", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 28, docs: [] }, Variant { name: "Mortal29", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 29, docs: [] }, Variant { name: "Mortal30", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 30, docs: [] }, Variant { name: "Mortal31", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 31, docs: [] }, Variant { name: "Mortal32", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 32, docs: [] }, Variant { name: "Mortal33", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 33, docs: [] }, Variant { name: "Mortal34", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 34, docs: [] }, Variant { name: "Mortal35", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 35, docs: [] }, Variant { name: "Mortal36", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 36, docs: [] }, Variant { name: "Mortal37", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 37, docs: [] }, Variant { name: "Mortal38", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 38, docs: [] }, Variant { name: "Mortal39", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 39, docs: [] }, Variant { name: "Mortal40", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 40, docs: [] }, Variant { name: "Mortal41", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 41, docs: [] }, Variant { name: "Mortal42", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 42, docs: [] }, Variant { name: "Mortal43", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 43, docs: [] }, Variant { name: "Mortal44", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 44, docs: [] }, Variant { name: "Mortal45", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 45, docs: [] }, Variant { name: "Mortal46", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 46, docs: [] }, Variant { name: "Mortal47", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 47, docs: [] }, Variant { name: "Mortal48", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 48, docs: [] }, Variant { name: "Mortal49", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 49, docs: [] }, Variant { name: "Mortal50", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 50, docs: [] }, Variant { name: "Mortal51", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 51, docs: [] }, Variant { name: "Mortal52", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 52, docs: [] }, Variant { name: "Mortal53", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 53, docs: [] }, Variant { name: "Mortal54", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 54, docs: [] }, Variant { name: "Mortal55", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 55, docs: [] }, Variant { name: "Mortal56", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 56, docs: [] }, Variant { name: "Mortal57", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 57, docs: [] }, Variant { name: "Mortal58", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 58, docs: [] }, Variant { name: "Mortal59", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 59, docs: [] }, Variant { name: "Mortal60", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 60, docs: [] }, Variant { name: "Mortal61", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 61, docs: [] }, Variant { name: "Mortal62", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 62, docs: [] }, Variant { name: "Mortal63", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 63, docs: [] }, Variant { name: "Mortal64", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 64, docs: [] }, Variant { name: "Mortal65", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 65, docs: [] }, Variant { name: "Mortal66", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 66, docs: [] }, Variant { name: "Mortal67", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 67, docs: [] }, Variant { name: "Mortal68", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 68, docs: [] }, Variant { name: "Mortal69", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 69, docs: [] }, Variant { name: "Mortal70", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 70, docs: [] }, Variant { name: "Mortal71", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 71, docs: [] }, Variant { name: "Mortal72", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 72, docs: [] }, Variant { name: "Mortal73", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 73, docs: [] }, Variant { name: "Mortal74", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 74, docs: [] }, Variant { name: "Mortal75", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 75, docs: [] }, Variant { name: "Mortal76", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 76, docs: [] }, Variant { name: "Mortal77", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 77, docs: [] }, Variant { name: "Mortal78", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 78, docs: [] }, Variant { name: "Mortal79", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 79, docs: [] }, Variant { name: "Mortal80", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 80, docs: [] }, Variant { name: "Mortal81", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 81, docs: [] }, Variant { name: "Mortal82", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 82, docs: [] }, Variant { name: "Mortal83", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 83, docs: [] }, Variant { name: "Mortal84", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 84, docs: [] }, Variant { name: "Mortal85", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 85, docs: [] }, Variant { name: "Mortal86", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 86, docs: [] }, Variant { name: "Mortal87", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 87, docs: [] }, Variant { name: "Mortal88", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 88, docs: [] }, Variant { name: "Mortal89", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 89, docs: [] }, Variant { name: "Mortal90", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 90, docs: [] }, Variant { name: "Mortal91", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 91, docs: [] }, Variant { name: "Mortal92", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 92, docs: [] }, Variant { name: "Mortal93", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 93, docs: [] }, Variant { name: "Mortal94", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 94, docs: [] }, Variant { name: "Mortal95", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 95, docs: [] }, Variant { name: "Mortal96", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 96, docs: [] }, Variant { name: "Mortal97", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 97, docs: [] }, Variant { name: "Mortal98", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 98, docs: [] }, Variant { name: "Mortal99", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 99, docs: [] }, Variant { name: "Mortal100", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 100, docs: [] }, Variant { name: "Mortal101", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 101, docs: [] }, Variant { name: "Mortal102", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 102, docs: [] }, Variant { name: "Mortal103", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 103, docs: [] }, Variant { name: "Mortal104", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 104, docs: [] }, Variant { name: "Mortal105", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 105, docs: [] }, Variant { name: "Mortal106", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 106, docs: [] }, Variant { name: "Mortal107", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 107, docs: [] }, Variant { name: "Mortal108", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 108, docs: [] }, Variant { name: "Mortal109", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 109, docs: [] }, Variant { name: "Mortal110", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 110, docs: [] }, Variant { name: "Mortal111", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 111, docs: [] }, Variant { name: "Mortal112", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 112, docs: [] }, Variant { name: "Mortal113", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 113, docs: [] }, Variant { name: "Mortal114", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 114, docs: [] }, Variant { name: "Mortal115", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 115, docs: [] }, Variant { name: "Mortal116", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 116, docs: [] }, Variant { name: "Mortal117", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 117, docs: [] }, Variant { name: "Mortal118", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 118, docs: [] }, Variant { name: "Mortal119", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 119, docs: [] }, Variant { name: "Mortal120", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 120, docs: [] }, Variant { name: "Mortal121", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 121, docs: [] }, Variant { name: "Mortal122", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 122, docs: [] }, Variant { name: "Mortal123", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 123, docs: [] }, Variant { name: "Mortal124", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 124, docs: [] }, Variant { name: "Mortal125", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 125, docs: [] }, Variant { name: "Mortal126", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 126, docs: [] }, Variant { name: "Mortal127", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 127, docs: [] }, Variant { name: "Mortal128", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 128, docs: [] }, Variant { name: "Mortal129", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 129, docs: [] }, Variant { name: "Mortal130", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 130, docs: [] }, Variant { name: "Mortal131", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 131, docs: [] }, Variant { name: "Mortal132", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 132, docs: [] }, Variant { name: "Mortal133", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 133, docs: [] }, Variant { name: "Mortal134", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 134, docs: [] }, Variant { name: "Mortal135", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 135, docs: [] }, Variant { name: "Mortal136", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 136, docs: [] }, Variant { name: "Mortal137", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 137, docs: [] }, Variant { name: "Mortal138", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 138, docs: [] }, Variant { name: "Mortal139", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 139, docs: [] }, Variant { name: "Mortal140", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 140, docs: [] }, Variant { name: "Mortal141", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 141, docs: [] }, Variant { name: "Mortal142", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 142, docs: [] }, Variant { name: "Mortal143", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 143, docs: [] }, Variant { name: "Mortal144", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 144, docs: [] }, Variant { name: "Mortal145", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 145, docs: [] }, Variant { name: "Mortal146", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 146, docs: [] }, Variant { name: "Mortal147", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 147, docs: [] }, Variant { name: "Mortal148", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 148, docs: [] }, Variant { name: "Mortal149", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 149, docs: [] }, Variant { name: "Mortal150", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 150, docs: [] }, Variant { name: "Mortal151", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 151, docs: [] }, Variant { name: "Mortal152", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 152, docs: [] }, Variant { name: "Mortal153", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 153, docs: [] }, Variant { name: "Mortal154", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 154, docs: [] }, Variant { name: "Mortal155", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 155, docs: [] }, Variant { name: "Mortal156", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 156, docs: [] }, Variant { name: "Mortal157", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 157, docs: [] }, Variant { name: "Mortal158", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 158, docs: [] }, Variant { name: "Mortal159", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 159, docs: [] }, Variant { name: "Mortal160", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 160, docs: [] }, Variant { name: "Mortal161", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 161, docs: [] }, Variant { name: "Mortal162", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 162, docs: [] }, Variant { name: "Mortal163", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 163, docs: [] }, Variant { name: "Mortal164", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 164, docs: [] }, Variant { name: "Mortal165", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 165, docs: [] }, Variant { name: "Mortal166", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 166, docs: [] }, Variant { name: "Mortal167", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 167, docs: [] }, Variant { name: "Mortal168", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 168, docs: [] }, Variant { name: "Mortal169", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 169, docs: [] }, Variant { name: "Mortal170", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 170, docs: [] }, Variant { name: "Mortal171", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 171, docs: [] }, Variant { name: "Mortal172", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 172, docs: [] }, Variant { name: "Mortal173", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 173, docs: [] }, Variant { name: "Mortal174", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 174, docs: [] }, Variant { name: "Mortal175", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 175, docs: [] }, Variant { name: "Mortal176", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 176, docs: [] }, Variant { name: "Mortal177", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 177, docs: [] }, Variant { name: "Mortal178", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 178, docs: [] }, Variant { name: "Mortal179", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 179, docs: [] }, Variant { name: "Mortal180", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 180, docs: [] }, Variant { name: "Mortal181", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 181, docs: [] }, Variant { name: "Mortal182", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 182, docs: [] }, Variant { name: "Mortal183", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 183, docs: [] }, Variant { name: "Mortal184", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 184, docs: [] }, Variant { name: "Mortal185", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 185, docs: [] }, Variant { name: "Mortal186", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 186, docs: [] }, Variant { name: "Mortal187", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 187, docs: [] }, Variant { name: "Mortal188", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 188, docs: [] }, Variant { name: "Mortal189", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 189, docs: [] }, Variant { name: "Mortal190", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 190, docs: [] }, Variant { name: "Mortal191", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 191, docs: [] }, Variant { name: "Mortal192", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 192, docs: [] }, Variant { name: "Mortal193", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 193, docs: [] }, Variant { name: "Mortal194", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 194, docs: [] }, Variant { name: "Mortal195", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 195, docs: [] }, Variant { name: "Mortal196", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 196, docs: [] }, Variant { name: "Mortal197", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 197, docs: [] }, Variant { name: "Mortal198", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 198, docs: [] }, Variant { name: "Mortal199", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 199, docs: [] }, Variant { name: "Mortal200", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 200, docs: [] }, Variant { name: "Mortal201", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 201, docs: [] }, Variant { name: "Mortal202", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 202, docs: [] }, Variant { name: "Mortal203", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 203, docs: [] }, Variant { name: "Mortal204", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 204, docs: [] }, Variant { name: "Mortal205", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 205, docs: [] }, Variant { name: "Mortal206", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 206, docs: [] }, Variant { name: "Mortal207", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 207, docs: [] }, Variant { name: "Mortal208", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 208, docs: [] }, Variant { name: "Mortal209", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 209, docs: [] }, Variant { name: "Mortal210", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 210, docs: [] }, Variant { name: "Mortal211", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 211, docs: [] }, Variant { name: "Mortal212", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 212, docs: [] }, Variant { name: "Mortal213", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 213, docs: [] }, Variant { name: "Mortal214", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 214, docs: [] }, Variant { name: "Mortal215", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 215, docs: [] }, Variant { name: "Mortal216", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 216, docs: [] }, Variant { name: "Mortal217", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 217, docs: [] }, Variant { name: "Mortal218", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 218, docs: [] }, Variant { name: "Mortal219", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 219, docs: [] }, Variant { name: "Mortal220", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 220, docs: [] }, Variant { name: "Mortal221", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 221, docs: [] }, Variant { name: "Mortal222", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 222, docs: [] }, Variant { name: "Mortal223", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 223, docs: [] }, Variant { name: "Mortal224", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 224, docs: [] }, Variant { name: "Mortal225", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 225, docs: [] }, Variant { name: "Mortal226", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 226, docs: [] }, Variant { name: "Mortal227", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 227, docs: [] }, Variant { name: "Mortal228", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 228, docs: [] }, Variant { name: "Mortal229", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 229, docs: [] }, Variant { name: "Mortal230", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 230, docs: [] }, Variant { name: "Mortal231", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 231, docs: [] }, Variant { name: "Mortal232", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 232, docs: [] }, Variant { name: "Mortal233", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 233, docs: [] }, Variant { name: "Mortal234", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 234, docs: [] }, Variant { name: "Mortal235", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 235, docs: [] }, Variant { name: "Mortal236", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 236, docs: [] }, Variant { name: "Mortal237", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 237, docs: [] }, Variant { name: "Mortal238", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 238, docs: [] }, Variant { name: "Mortal239", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 239, docs: [] }, Variant { name: "Mortal240", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 240, docs: [] }, Variant { name: "Mortal241", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 241, docs: [] }, Variant { name: "Mortal242", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 242, docs: [] }, Variant { name: "Mortal243", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 243, docs: [] }, Variant { name: "Mortal244", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 244, docs: [] }, Variant { name: "Mortal245", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 245, docs: [] }, Variant { name: "Mortal246", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 246, docs: [] }, Variant { name: "Mortal247", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 247, docs: [] }, Variant { name: "Mortal248", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 248, docs: [] }, Variant { name: "Mortal249", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 249, docs: [] }, Variant { name: "Mortal250", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 250, docs: [] }, Variant { name: "Mortal251", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 251, docs: [] }, Variant { name: "Mortal252", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 252, docs: [] }, Variant { name: "Mortal253", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 253, docs: [] }, Variant { name: "Mortal254", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 254, docs: [] }, Variant { name: "Mortal255", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 255, docs: [] }] }), docs: [] } }, PortableType { id: 155, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_nonce", "CheckNonce"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Nonce"), docs: [] }] }), docs: [] } }, PortableType { id: 156, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_weight", "CheckWeight"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 157, ty: Type { path: Path { segments: ["pallet_transaction_payment", "ChargeTransactionPayment"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 158, ty: Type { path: Path { segments: ["sp_runtime", "generic", "block", "Block"] }, type_params: [TypeParameter { name: "Header", ty: Some(UntrackedSymbol { id: 159, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Extrinsic", ty: Some(UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("header"), ty: UntrackedSymbol { id: 159, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Header"), docs: [] }, Field { name: Some("extrinsics"), ty: UntrackedSymbol { id: 161, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Extrinsic>"), docs: [] }] }), docs: [] } }, PortableType { id: 159, ty: Type { path: Path { segments: ["sp_runtime", "generic", "header", "Header"] }, type_params: [TypeParameter { name: "Number", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Hash", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("parent_hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash::Output"), docs: [] }, Field { name: Some("number"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Number"), docs: [] }, Field { name: Some("state_root"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash::Output"), docs: [] }, Field { name: Some("extrinsics_root"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash::Output"), docs: [] }, Field { name: Some("digest"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Digest"), docs: [] }] }), docs: [] } }, PortableType { id: 160, ty: Type { path: Path { segments: ["sp_runtime", "generic", "unchecked_extrinsic", "UncheckedExtrinsic"] }, type_params: [TypeParameter { name: "Address", ty: Some(UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Call", ty: Some(UntrackedSymbol { id: 71, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Signature", ty: Some(UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Extra", ty: Some(UntrackedSymbol { id: 148, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 161, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 162, ty: Type { path: Path { segments: ["sp_core", "OpaqueMetadata"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 163, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 162, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 162, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 164, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 165, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 166, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 166, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 166, ty: Type { path: Path { segments: ["sp_runtime", "transaction_validity", "TransactionValidityError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Invalid", fields: [Field { name: None, ty: UntrackedSymbol { id: 167, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InvalidTransaction"), docs: [] }], index: 0, docs: [] }, Variant { name: "Unknown", fields: [Field { name: None, ty: UntrackedSymbol { id: 168, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("UnknownTransaction"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 167, ty: Type { path: Path { segments: ["sp_runtime", "transaction_validity", "InvalidTransaction"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Call", fields: [], index: 0, docs: [] }, Variant { name: "Payment", fields: [], index: 1, docs: [] }, Variant { name: "Future", fields: [], index: 2, docs: [] }, Variant { name: "Stale", fields: [], index: 3, docs: [] }, Variant { name: "BadProof", fields: [], index: 4, docs: [] }, Variant { name: "AncientBirthBlock", fields: [], index: 5, docs: [] }, Variant { name: "ExhaustsResources", fields: [], index: 6, docs: [] }, Variant { name: "Custom", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 7, docs: [] }, Variant { name: "BadMandatory", fields: [], index: 8, docs: [] }, Variant { name: "MandatoryValidation", fields: [], index: 9, docs: [] }, Variant { name: "BadSigner", fields: [], index: 10, docs: [] }] }), docs: [] } }, PortableType { id: 168, ty: Type { path: Path { segments: ["sp_runtime", "transaction_validity", "UnknownTransaction"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "CannotLookup", fields: [], index: 0, docs: [] }, Variant { name: "NoUnsignedValidator", fields: [], index: 1, docs: [] }, Variant { name: "Custom", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 169, ty: Type { path: Path { segments: ["sp_inherents", "InherentData"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("data"), ty: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BTreeMap<InherentIdentifier, Vec<u8>>"), docs: [] }] }), docs: [] } }, PortableType { id: 170, ty: Type { path: Path { segments: ["BTreeMap"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 171, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 171, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 172, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 173, ty: Type { path: Path { segments: ["sp_inherents", "CheckInherentsResult"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("okay"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("fatal_error"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("errors"), ty: UntrackedSymbol { id: 169, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InherentData"), docs: [] }] }), docs: [] } }, PortableType { id: 174, ty: Type { path: Path { segments: ["sp_runtime", "transaction_validity", "TransactionSource"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InBlock", fields: [], index: 0, docs: [] }, Variant { name: "Local", fields: [], index: 1, docs: [] }, Variant { name: "External", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 175, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 176, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 166, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 176, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 166, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 176, ty: Type { path: Path { segments: ["sp_runtime", "transaction_validity", "ValidTransaction"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("priority"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TransactionPriority"), docs: [] }, Field { name: Some("requires"), ty: UntrackedSymbol { id: 53, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<TransactionTag>"), docs: [] }, Field { name: Some("provides"), ty: UntrackedSymbol { id: 53, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<TransactionTag>"), docs: [] }, Field { name: Some("longevity"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TransactionLongevity"), docs: [] }, Field { name: Some("propagate"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }), docs: [] } }, PortableType { id: 177, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 178, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 179, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 179, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 179, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 180, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 180, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 181, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 181, ty: Type { path: Path { segments: ["sp_core", "crypto", "KeyTypeId"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 17, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 4]"), docs: [] }] }), docs: [] } }, PortableType { id: 182, ty: Type { path: Path { segments: ["pallet_transaction_payment", "types", "RuntimeDispatchInfo"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Weight", ty: Some(UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("weight"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("class"), ty: UntrackedSymbol { id: 23, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchClass"), docs: [] }, Field { name: Some("partial_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 183, ty: Type { path: Path { segments: ["pallet_transaction_payment", "types", "FeeDetails"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("inclusion_fee"), ty: UntrackedSymbol { id: 184, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<InclusionFee<Balance>>"), docs: [] }, Field { name: Some("tip"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 184, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 185, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 185, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 185, ty: Type { path: Path { segments: ["pallet_transaction_payment", "types", "InclusionFee"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("base_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("len_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("adjusted_weight_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 186, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 187, ty: Type { path: Path { segments: ["pallet_contracts_primitives", "ContractResult"] }, type_params: [TypeParameter { name: "R", ty: Some(UntrackedSymbol { id: 188, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "EventRecord", ty: Some(UntrackedSymbol { id: 19, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("gas_consumed"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("gas_required"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("storage_deposit"), ty: UntrackedSymbol { id: 191, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("StorageDeposit<Balance>"), docs: [] }, Field { name: Some("debug_message"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 188, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("R"), docs: [] }, Field { name: Some("events"), ty: UntrackedSymbol { id: 192, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Vec<EventRecord>>"), docs: [] }] }), docs: [] } }, PortableType { id: 188, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 189, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 189, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 189, ty: Type { path: Path { segments: ["pallet_contracts_primitives", "ExecReturnValue"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("flags"), ty: UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReturnFlags"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 190, ty: Type { path: Path { segments: ["pallet_contracts_primitives", "ReturnFlags"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("bits"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 191, ty: Type { path: Path { segments: ["pallet_contracts_primitives", "StorageDeposit"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Refund", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 0, docs: [] }, Variant { name: "Charge", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 192, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 193, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 193, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 193, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 19, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 194, ty: Type { path: Path { segments: ["pallet_contracts_primitives", "Code"] }, type_params: [TypeParameter { name: "Hash", ty: Some(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Upload", fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Existing", fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 195, ty: Type { path: Path { segments: ["pallet_contracts_primitives", "ContractResult"] }, type_params: [TypeParameter { name: "R", ty: Some(UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "EventRecord", ty: Some(UntrackedSymbol { id: 19, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("gas_consumed"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("gas_required"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("storage_deposit"), ty: UntrackedSymbol { id: 191, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("StorageDeposit<Balance>"), docs: [] }, Field { name: Some("debug_message"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("R"), docs: [] }, Field { name: Some("events"), ty: UntrackedSymbol { id: 192, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Vec<EventRecord>>"), docs: [] }] }), docs: [] } }, PortableType { id: 196, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 197, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 197, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 197, ty: Type { path: Path { segments: ["pallet_contracts_primitives", "InstantiateReturnValue"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("result"), ty: UntrackedSymbol { id: 189, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExecReturnValue"), docs: [] }, Field { name: Some("account_id"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }] }), docs: [] } }, PortableType { id: 198, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 199, ty: Type { path: Path { segments: ["pallet_contracts_primitives", "CodeUploadReturnValue"] }, type_params: [TypeParameter { name: "CodeHash", ty: Some(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 200, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 177, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 201, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 177, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 201, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 201, ty: Type { path: Path { segments: ["pallet_contracts_primitives", "ContractAccessError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "DoesntExist", fields: [], index: 0, docs: [] }, Variant { name: "KeyDecodingFailed", fields: [], index: 1, docs: [] }, Variant { name: "MigrationInProgress", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 202, ty: Type { path: Path { segments: ["contracts_node_runtime", "RuntimeError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "System", fields: [Field { name: None, ty: UntrackedSymbol { id: 67, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("frame_system::Error<Runtime>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Utility", fields: [Field { name: None, ty: UntrackedSymbol { id: 87, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_utility::Error<Runtime>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Balances", fields: [Field { name: None, ty: UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_balances::Error<Runtime>"), docs: [] }], index: 4, docs: [] }, Variant { name: "Sudo", fields: [Field { name: None, ty: UntrackedSymbol { id: 106, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_sudo::Error<Runtime>"), docs: [] }], index: 7, docs: [] }, Variant { name: "Contracts", fields: [Field { name: None, ty: UntrackedSymbol { id: 130, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_contracts::Error<Runtime>"), docs: [] }], index: 8, docs: [] }, Variant { name: "Assets", fields: [Field { name: None, ty: UntrackedSymbol { id: 141, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_assets::Error<Runtime>"), docs: [] }], index: 9, docs: [] }] }), docs: [] } }] }, pallets: OrderedMap { values: [PalletMetadataInner { name: "System", index: 0, storage: Some(StorageMetadata { prefix: "System", entries: OrderedMap { values: [StorageEntryMetadata { name: "Account", modifier: Default, entry_type: Map { hashers: [Blake2_128Concat], key_ty: 0, value_ty: 3 }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128], docs: [" The full account information for a particular account ID."] }, StorageEntryMetadata { name: "ExtrinsicCount", modifier: Optional, entry_type: Plain(4), default: [0], docs: [" Total extrinsics count for the current block."] }, StorageEntryMetadata { name: "BlockWeight", modifier: Default, entry_type: Plain(8), default: [0, 0, 0, 0, 0, 0], docs: [" The current weight for the block."] }, StorageEntryMetadata { name: "AllExtrinsicsLen", modifier: Optional, entry_type: Plain(4), default: [0], docs: [" Total length (in bytes) for all extrinsics put together, for the current block."] }, StorageEntryMetadata { name: "BlockHash", modifier: Default, entry_type: Map { hashers: [Twox64Concat], key_ty: 4, value_ty: 12 }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Map of block numbers to block hashes."] }, StorageEntryMetadata { name: "ExtrinsicData", modifier: Default, entry_type: Map { hashers: [Twox64Concat], key_ty: 4, value_ty: 13 }, default: [0], docs: [" Extrinsics data for the current block (maps an extrinsic's index to its data)."] }, StorageEntryMetadata { name: "Number", modifier: Default, entry_type: Plain(4), default: [0, 0, 0, 0], docs: [" The current block number being processed. Set by `execute_block`."] }, StorageEntryMetadata { name: "ParentHash", modifier: Default, entry_type: Plain(12), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Hash of the previous block."] }, StorageEntryMetadata { name: "Digest", modifier: Default, entry_type: Plain(14), default: [0], docs: [" Digest of the current block, also part of the block header."] }, StorageEntryMetadata { name: "Events", modifier: Default, entry_type: Plain(18), default: [0], docs: [" Events deposited for the current block.", "", " NOTE: The item is unbound and should therefore never be read on chain.", " It could otherwise inflate the PoV size of a block.", "", " Events have a large in-memory size. Box the events to not go out-of-memory", " just in case someone still reads them from within the runtime."] }, StorageEntryMetadata { name: "EventCount", modifier: Default, entry_type: Plain(4), default: [0, 0, 0, 0], docs: [" The number of events in the `Events<T>` list."] }, StorageEntryMetadata { name: "EventTopics", modifier: Default, entry_type: Map { hashers: [Blake2_128Concat], key_ty: 12, value_ty: 45 }, default: [0], docs: [" Mapping between a topic (represented by T::Hash) and a vector of indexes", " of events in the `<Events<T>>` list.", "", " All topic vectors have deterministic storage locations depending on the topic. This", " allows light-clients to leverage the changes trie storage tracking mechanism and", " in case of changes fetch the list of events of interest.", "", " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just", " the `EventIndex` then in case if the topic has the same contents on the next block", " no notification will be triggered thus the event might be lost."] }, StorageEntryMetadata { name: "LastRuntimeUpgrade", modifier: Optional, entry_type: Plain(47), default: [0], docs: [" Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."] }, StorageEntryMetadata { name: "UpgradedToU32RefCount", modifier: Default, entry_type: Plain(42), default: [0], docs: [" True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."] }, StorageEntryMetadata { name: "UpgradedToTripleRefCount", modifier: Default, entry_type: Plain(42), default: [0], docs: [" True if we have upgraded so that AccountInfo contains three types of `RefCount`. False", " (default) if not."] }, StorageEntryMetadata { name: "ExecutionPhase", modifier: Optional, entry_type: Plain(43), default: [0], docs: [" The execution phase of the block."] }], map: {"ExtrinsicCount": 1, "EventCount": 10, "UpgradedToTripleRefCount": 14, "BlockWeight": 2, "ExecutionPhase": 15, "LastRuntimeUpgrade": 12, "EventTopics": 11, "Digest": 8, "Account": 0, "AllExtrinsicsLen": 3, "ParentHash": 7, "ExtrinsicData": 5, "BlockHash": 4, "Events": 9, "UpgradedToU32RefCount": 13, "Number": 6} } }), call_ty: Some(50), call_variant_index: VariantIndex { by_name: {"kill_storage": 5, "set_storage": 4, "kill_prefix": 6, "set_code_without_checks": 3, "set_code": 2, "remark": 0, "set_heap_pages": 1, "remark_with_event": 7}, by_index: {0: 0, 1: 1, 6: 6, 7: 7, 5: 5, 2: 2, 4: 4, 3: 3} }, event_ty: Some(21), event_variant_index: VariantIndex { by_name: {"CodeUpdated": 2, "KilledAccount": 4, "ExtrinsicFailed": 1, "NewAccount": 3, "ExtrinsicSuccess": 0, "Remarked": 5}, by_index: {2: 2, 4: 4, 0: 0, 1: 1, 3: 3, 5: 5} }, error_ty: Some(67), error_variant_index: VariantIndex { by_name: {"InvalidSpecName": 0, "NonDefaultComposite": 3, "FailedToExtractRuntimeVersion": 2, "NonZeroRefCount": 4, "CallFiltered": 5, "SpecVersionNeedsToIncrease": 1}, by_index: {3: 3, 5: 5, 0: 0, 1: 1, 4: 4, 2: 2} }, constants: OrderedMap { values: [ConstantMetadata { name: "BlockWeights", ty: 54, value: [2, 91, 31, 93, 0, 11, 0, 32, 74, 169, 209, 1, 19, 255, 255, 255, 255, 255, 255, 255, 255, 194, 160, 169, 29, 0, 1, 11, 208, 95, 159, 166, 46, 1, 19, 102, 102, 102, 102, 102, 102, 102, 166, 1, 11, 0, 152, 247, 62, 93, 1, 19, 255, 255, 255, 255, 255, 255, 255, 191, 1, 0, 0, 194, 160, 169, 29, 0, 1, 11, 208, 231, 241, 16, 163, 1, 19, 102, 102, 102, 102, 102, 102, 102, 230, 1, 11, 0, 32, 74, 169, 209, 1, 19, 255, 255, 255, 255, 255, 255, 255, 255, 1, 7, 0, 136, 82, 106, 116, 19, 0, 0, 0, 0, 0, 0, 0, 64, 194, 160, 169, 29, 0, 0, 0, 0], docs: [" Block & extrinsics weights: base values and limits."] }, ConstantMetadata { name: "BlockLength", ty: 58, value: [0, 0, 60, 0, 0, 0, 80, 0, 0, 0, 80, 0], docs: [" The maximum length of a block (in bytes)."] }, ConstantMetadata { name: "BlockHashCount", ty: 4, value: [96, 9, 0, 0], docs: [" Maximum number of block number to block hash mappings to keep (oldest pruned first)."] }, ConstantMetadata { name: "DbWeight", ty: 60, value: [64, 120, 125, 1, 0, 0, 0, 0, 0, 225, 245, 5, 0, 0, 0, 0], docs: [" The weight of runtime database operations the runtime can invoke."] }, ConstantMetadata { name: "Version", ty: 61, value: [96, 115, 117, 98, 115, 116, 114, 97, 116, 101, 45, 99, 111, 110, 116, 114, 97, 99, 116, 115, 45, 110, 111, 100, 101, 96, 115, 117, 98, 115, 116, 114, 97, 116, 101, 45, 99, 111, 110, 116, 114, 97, 99, 116, 115, 45, 110, 111, 100, 101, 1, 0, 0, 0, 100, 0, 0, 0, 1, 0, 0, 0, 40, 223, 106, 203, 104, 153, 7, 96, 155, 4, 0, 0, 0, 55, 227, 151, 252, 124, 145, 245, 228, 2, 0, 0, 0, 64, 254, 58, 212, 1, 248, 149, 154, 6, 0, 0, 0, 210, 188, 152, 151, 238, 208, 143, 21, 3, 0, 0, 0, 247, 139, 39, 139, 229, 63, 69, 76, 2, 0, 0, 0, 171, 60, 5, 114, 41, 31, 235, 139, 1, 0, 0, 0, 188, 157, 137, 144, 79, 91, 146, 63, 1, 0, 0, 0, 55, 200, 187, 19, 80, 169, 162, 168, 4, 0, 0, 0, 243, 255, 20, 213, 171, 82, 112, 89, 3, 0, 0, 0, 104, 182, 107, 161, 34, 201, 63, 167, 2, 0, 0, 0, 1, 0, 0, 0, 1], docs: [" Get the chain's current version."] }, ConstantMetadata { name: "SS58Prefix", ty: 66, value: [42, 0], docs: [" The designated SS58 prefix of this chain.", "", " This replaces the \"ss58Format\" property declared in the chain spec. Reason is", " that the runtime should know about the prefix in order to make use of it as", " an identifier of the chain."] }], map: {"BlockHashCount": 2, "DbWeight": 3, "Version": 4, "BlockLength": 1, "SS58Prefix": 5, "BlockWeights": 0} }, docs: [] }, PalletMetadataInner { name: "RandomnessCollectiveFlip", index: 1, storage: Some(StorageMetadata { prefix: "RandomnessCollectiveFlip", entries: OrderedMap { values: [StorageEntryMetadata { name: "RandomMaterial", modifier: Default, entry_type: Plain(68), default: [0], docs: [" Series of block headers from the last 81 blocks that acts as random seed material. This", " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of", " the oldest hash."] }], map: {"RandomMaterial": 0} } }), call_ty: None, call_variant_index: VariantIndex { by_name: {}, by_index: {} }, event_ty: None, event_variant_index: VariantIndex { by_name: {}, by_index: {} }, error_ty: None, error_variant_index: VariantIndex { by_name: {}, by_index: {} }, constants: OrderedMap { values: [], map: {} }, docs: [] }, PalletMetadataInner { name: "Utility", index: 2, storage: None, call_ty: Some(69), call_variant_index: VariantIndex { by_name: {"force_batch": 4, "batch_all": 2, "dispatch_as": 3, "batch": 0, "with_weight": 5, "as_derivative": 1}, by_index: {1: 1, 3: 3, 4: 4, 5: 5, 0: 0, 2: 2} }, event_ty: Some(30), event_variant_index: VariantIndex { by_name: {"BatchCompletedWithErrors": 2, "DispatchedAs": 5, "BatchCompleted": 1, "BatchInterrupted": 0, "ItemCompleted": 3, "ItemFailed": 4}, by_index: {1: 1, 0: 0, 4: 4, 5: 5, 3: 3, 2: 2} }, error_ty: Some(87), error_variant_index: VariantIndex { by_name: {"TooManyCalls": 0}, by_index: {0: 0} }, constants: OrderedMap { values: [ConstantMetadata { name: "batched_calls_limit", ty: 4, value: [170, 42, 0, 0], docs: [" The limit on the number of batched calls."] }], map: {"batched_calls_limit": 0} }, docs: [] }, PalletMetadataInner { name: "Timestamp", index: 3, storage: Some(StorageMetadata { prefix: "Timestamp", entries: OrderedMap { values: [StorageEntryMetadata { name: "Now", modifier: Default, entry_type: Plain(11), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The current time for the current block."] }, StorageEntryMetadata { name: "DidUpdate", modifier: Default, entry_type: Plain(42), default: [0], docs: [" Whether the timestamp has been updated in this block.", "", " This value is updated to `true` upon successful submission of a timestamp by a node.", " It is then checked at the end of each block execution in the `on_finalize` hook."] }], map: {"Now": 0, "DidUpdate": 1} } }), call_ty: Some(72), call_variant_index: VariantIndex { by_name: {"set": 0}, by_index: {0: 0} }, event_ty: None, event_variant_index: VariantIndex { by_name: {}, by_index: {} }, error_ty: None, error_variant_index: VariantIndex { by_name: {}, by_index: {} }, constants: OrderedMap { values: [ConstantMetadata { name: "MinimumPeriod", ty: 11, value: [5, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum period between blocks.", "", " Be aware that this is different to the *expected* period that the block production", " apparatus provides. Your chosen consensus system will generally work with this to", " determine a sensible block time. For example, in the Aura pallet it will be double this", " period on default settings."] }], map: {"MinimumPeriod": 0} }, docs: [] }, PalletMetadataInner { name: "Balances", index: 4, storage: Some(StorageMetadata { prefix: "Balances", entries: OrderedMap { values: [StorageEntryMetadata { name: "TotalIssuance", modifier: Default, entry_type: Plain(6), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total units issued in the system."] }, StorageEntryMetadata { name: "InactiveIssuance", modifier: Default, entry_type: Plain(6), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total units of outstanding deactivated balance in the system."] }, StorageEntryMetadata { name: "Account", modifier: Default, entry_type: Map { hashers: [Blake2_128Concat], key_ty: 0, value_ty: 5 }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128], docs: [" The Balances pallet example of storing the balance of an account.", "", " # Example", "", " ```nocompile", "  impl pallet_balances::Config for Runtime {", "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>", "  }", " ```", "", " You can also store the balance of an account in the `System` pallet.", "", " # Example", "", " ```nocompile", "  impl pallet_balances::Config for Runtime {", "   type AccountStore = System", "  }", " ```", "", " But this comes with tradeoffs, storing account balances in the system pallet stores", " `frame_system` data alongside the account data contrary to storing account balances in the", " `Balances` pallet, which uses a `StorageMap` to store balances data only.", " NOTE: This is only used in the case that this pallet is used to store balances."] }, StorageEntryMetadata { name: "Locks", modifier: Default, entry_type: Map { hashers: [Blake2_128Concat], key_ty: 0, value_ty: 88 }, default: [0], docs: [" Any liquidity locks on some account balances.", " NOTE: Should only be accessed when setting, changing and freeing a lock."] }, StorageEntryMetadata { name: "Reserves", modifier: Default, entry_type: Map { hashers: [Blake2_128Concat], key_ty: 0, value_ty: 92 }, default: [0], docs: [" Named reserves on some account balances."] }, StorageEntryMetadata { name: "Holds", modifier: Default, entry_type: Map { hashers: [Blake2_128Concat], key_ty: 0, value_ty: 95 }, default: [0], docs: [" Holds on account balances."] }, StorageEntryMetadata { name: "Freezes", modifier: Default, entry_type: Map { hashers: [Blake2_128Concat], key_ty: 0, value_ty: 100 }, default: [0], docs: [" Freeze locks on account balances."] }], map: {"Holds": 5, "Locks": 3, "TotalIssuance": 0, "InactiveIssuance": 1, "Reserves": 4, "Account": 2, "Freezes": 6} } }), call_ty: Some(73), call_variant_index: VariantIndex { by_name: {"transfer_allow_death": 0, "force_unreserve": 4, "upgrade_accounts": 5, "force_set_balance": 6, "transfer_keep_alive": 2, "force_transfer": 1, "transfer_all": 3}, by_index: {2: 1, 3: 2, 5: 4, 4: 3, 8: 6, 0: 0, 6: 5} }, event_ty: Some(33), event_variant_index: VariantIndex { by_name: {"Issued": 15, "BalanceSet": 3, "Thawed": 20, "Reserved": 4, "Withdraw": 8, "Unlocked": 18, "Upgraded": 14, "Locked": 17, "Deposit": 7, "Minted": 10, "Slashed": 9, "Suspended": 12, "Rescinded": 16, "Frozen": 19, "DustLost": 1, "ReserveRepatriated": 6, "Restored": 13, "Burned": 11, "Endowed": 0, "Unreserved": 5, "Transfer": 2}, by_index: {11: 11, 8: 8, 7: 7, 1: 1, 9: 9, 12: 12, 16: 16, 6: 6, 2: 2, 0: 0, 14: 14, 4: 4, 10: 10, 20: 20, 18: 18, 5: 5, 15: 15, 3: 3, 13: 13, 19: 19, 17: 17} }, error_ty: Some(103), error_variant_index: VariantIndex { by_name: {"TooManyHolds": 8, "LiquidityRestrictions": 1, "InsufficientBalance": 2, "DeadAccount": 6, "ExistentialDeposit": 3, "TooManyReserves": 7, "TooManyFreezes": 9, "ExistingVestingSchedule": 5, "VestingBalance": 0, "Expendability": 4}, by_index: {0: 0, 5: 5, 9: 9, 4: 4, 1: 1, 3: 3, 6: 6, 8: 8, 2: 2, 7: 7} }, constants: OrderedMap { values: [ConstantMetadata { name: "ExistentialDeposit", ty: 6, value: [0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!", "", " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for", " this pallet. However, you do so at your own risk: this will open up a major DoS vector.", " In case you have multiple sources of provider references, you may also get unexpected", " behaviour if you set this to zero.", "", " Bottom line: Do yourself a favour and make it at least one!"] }, ConstantMetadata { name: "MaxLocks", ty: 4, value: [50, 0, 0, 0], docs: [" The maximum number of locks that should exist on an account.", " Not strictly enforced, but used for weight estimation."] }, ConstantMetadata { name: "MaxReserves", ty: 4, value: [50, 0, 0, 0], docs: [" The maximum number of named reserves that can exist on an account."] }, ConstantMetadata { name: "MaxHolds", ty: 4, value: [2, 0, 0, 0], docs: [" The maximum number of holds that can exist on an account at any time."] }, ConstantMetadata { name: "MaxFreezes", ty: 4, value: [0, 0, 0, 0], docs: [" The maximum number of individual freeze locks that can exist on an account at any time."] }], map: {"MaxFreezes": 4, "MaxReserves": 2, "ExistentialDeposit": 0, "MaxLocks": 1, "MaxHolds": 3} }, docs: [] }, PalletMetadataInner { name: "Authorship", index: 5, storage: Some(StorageMetadata { prefix: "Authorship", entries: OrderedMap { values: [StorageEntryMetadata { name: "Author", modifier: Optional, entry_type: Plain(0), default: [0], docs: [" Author of current block."] }], map: {"Author": 0} } }), call_ty: None, call_variant_index: VariantIndex { by_name: {}, by_index: {} }, event_ty: None, event_variant_index: VariantIndex { by_name: {}, by_index: {} }, error_ty: None, error_variant_index: VariantIndex { by_name: {}, by_index: {} }, constants: OrderedMap { values: [], map: {} }, docs: [] }, PalletMetadataInner { name: "TransactionPayment", index: 6, storage: Some(StorageMetadata { prefix: "TransactionPayment", entries: OrderedMap { values: [StorageEntryMetadata { name: "NextFeeMultiplier", modifier: Default, entry_type: Plain(104), default: [0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, StorageEntryMetadata { name: "StorageVersion", modifier: Default, entry_type: Plain(105), default: [0], docs: [] }], map: {"StorageVersion": 1, "NextFeeMultiplier": 0} } }), call_ty: None, call_variant_index: VariantIndex { by_name: {}, by_index: {} }, event_ty: Some(35), event_variant_index: VariantIndex { by_name: {"TransactionFeePaid": 0}, by_index: {0: 0} }, error_ty: None, error_variant_index: VariantIndex { by_name: {}, by_index: {} }, constants: OrderedMap { values: [ConstantMetadata { name: "OperationalFeeMultiplier", ty: 2, value: [5], docs: [" A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their", " `priority`", "", " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later", " added to a tip component in regular `priority` calculations.", " It means that a `Normal` transaction can front-run a similarly-sized `Operational`", " extrinsic (with no tip), by including a tip value greater than the virtual tip.", "", " ```rust,ignore", " // For `Normal`", " let priority = priority_calc(tip);", "", " // For `Operational`", " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;", " let priority = priority_calc(tip + virtual_tip);", " ```", "", " Note that since we use `final_fee` the multiplier applies also to the regular `tip`", " sent with the transaction. So, not only does the transaction get a priority bump based", " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`", " transactions."] }], map: {"OperationalFeeMultiplier": 0} }, docs: [] }, PalletMetadataInner { name: "Sudo", index: 7, storage: Some(StorageMetadata { prefix: "Sudo", entries: OrderedMap { values: [StorageEntryMetadata { name: "Key", modifier: Optional, entry_type: Plain(0), default: [0], docs: [" The `AccountId` of the sudo key."] }], map: {"Key": 0} } }), call_ty: Some(79), call_variant_index: VariantIndex { by_name: {"set_key": 2, "sudo": 0, "sudo_as": 3, "sudo_unchecked_weight": 1}, by_index: {0: 0, 2: 2, 1: 1, 3: 3} }, event_ty: Some(36), event_variant_index: VariantIndex { by_name: {"Sudid": 0, "KeyChanged": 1, "SudoAsDone": 2}, by_index: {2: 2, 1: 1, 0: 0} }, error_ty: Some(106), error_variant_index: VariantIndex { by_name: {"RequireSudo": 0}, by_index: {0: 0} }, constants: OrderedMap { values: [], map: {} }, docs: [] }, PalletMetadataInner { name: "Contracts", index: 8, storage: Some(StorageMetadata { prefix: "Contracts", entries: OrderedMap { values: [StorageEntryMetadata { name: "PristineCode", modifier: Optional, entry_type: Map { hashers: [Identity], key_ty: 12, value_ty: 107 }, default: [0], docs: [" A mapping from a contract's code hash to its code."] }, StorageEntryMetadata { name: "CodeInfoOf", modifier: Optional, entry_type: Map { hashers: [Identity], key_ty: 12, value_ty: 108 }, default: [0], docs: [" A mapping from a contract's code hash to its code info."] }, StorageEntryMetadata { name: "Nonce", modifier: Default, entry_type: Plain(11), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" This is a **monotonic** counter incremented on contract instantiation.", "", " This is used in order to generate unique trie ids for contracts.", " The trie id of a new contract is calculated from hash(account_id, nonce).", " The nonce is required because otherwise the following sequence would lead to", " a possible collision of storage:", "", " 1. Create a new contract.", " 2. Terminate the contract.", " 3. Immediately recreate the contract with the same account_id.", "", " This is bad because the contents of a trie are deleted lazily and there might be", " storage of the old instantiation still in it when the new contract is created. Please", " note that we can't replace the counter by the block number because the sequence above", " can happen in the same block. We also can't keep the account counter in memory only", " because storage is the only way to communicate across different extrinsics in the", " same block.", "", " # Note", "", " Do not use it to determine the number of contracts. It won't be decremented if", " a contract is destroyed."] }, StorageEntryMetadata { name: "ContractInfoOf", modifier: Optional, entry_type: Map { hashers: [Twox64Concat], key_ty: 0, value_ty: 109 }, default: [0], docs: [" The code associated with a given account.", "", " TWOX-NOTE: SAFE since `AccountId` is a secure hash."] }, StorageEntryMetadata { name: "DeletionQueue", modifier: Optional, entry_type: Map { hashers: [Twox64Concat], key_ty: 4, value_ty: 110 }, default: [0], docs: [" Evicted contracts that await child trie deletion.", "", " Child trie deletion is a heavy operation depending on the amount of storage items", " stored in said trie. Therefore this operation is performed lazily in `on_idle`."] }, StorageEntryMetadata { name: "DeletionQueueCounter", modifier: Default, entry_type: Plain(115), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" A pair of monotonic counters used to track the latest contract marked for deletion", " and the latest deleted contract in queue."] }, StorageEntryMetadata { name: "MigrationInProgress", modifier: Optional, entry_type: Plain(116), default: [0], docs: [" A migration can span across multiple blocks. This storage defines a cursor to track the", " progress of the migration, enabling us to resume from the last completed position."] }], map: {"MigrationInProgress": 6, "Nonce": 2, "DeletionQueue": 4, "PristineCode": 0, "DeletionQueueCounter": 5, "CodeInfoOf": 1, "ContractInfoOf": 3} } }), call_ty: Some(80), call_variant_index: VariantIndex { by_name: {"set_code": 5, "migrate": 9, "instantiate_with_code": 7, "call_old_weight": 0, "instantiate": 8, "remove_code": 4, "instantiate_with_code_old_weight": 1, "instantiate_old_weight": 2, "upload_code": 3, "call": 6}, by_index: {7: 7, 3: 3, 8: 8, 6: 6, 1: 1, 2: 2, 0: 0, 4: 4, 5: 5, 9: 9} }, event_ty: Some(38), event_variant_index: VariantIndex { by_name: {"Instantiated": 0, "DelegateCalled": 7, "CodeStored": 2, "StorageDepositTransferredAndHeld": 8, "CodeRemoved": 4, "Terminated": 1, "ContractEmitted": 3, "ContractCodeUpdated": 5, "StorageDepositTransferredAndReleased": 9, "Called": 6}, by_index: {9: 9, 5: 5, 0: 0, 3: 3, 6: 6, 1: 1, 7: 7, 4: 4, 8: 8, 2: 2} }, error_ty: Some(130), error_variant_index: VariantIndex { by_name: {"DelegateDependencyAlreadyExists": 32, "CodeInfoNotFound": 9, "CodeRejected": 26, "StorageDepositLimitExhausted": 23, "Indeterministic": 27, "CannotAddSelfAsDelegateDependency": 33, "ValueTooLarge": 13, "MigrationInProgress": 28, "TerminatedWhileReentrant": 14, "TransferFailed": 4, "OutputBufferTooSmall": 3, "NoChainExtension": 18, "DuplicateContract": 19, "TerminatedInConstructor": 20, "InputForwarded": 15, "DelegateDependencyNotFound": 31, "CodeInUse": 24, "NoMigrationPerformed": 29, "MaxDelegateDependenciesReached": 30, "InvalidCallFlags": 1, "CodeNotFound": 8, "RandomSubjectTooLong": 16, "OutOfBounds": 10, "OutOfGas": 2, "ContractNotFound": 6, "StorageDepositNotEnoughFunds": 22, "MaxCallDepthReached": 5, "ContractTrapped": 12, "InvalidSchedule": 0, "ContractReverted": 25, "DecodingFailed": 11, "ReentranceDenied": 21, "TooManyTopics": 17, "CodeTooLarge": 7}, by_index: {22: 22, 8: 8, 20: 20, 33: 33, 7: 7, 28: 28, 26: 26, 11: 11, 9: 9, 13: 13, 1: 1, 18: 18, 23: 23, 25: 25, 24: 24, 31: 31, 3: 3, 32: 32, 4: 4, 12: 12, 30: 30, 6: 6, 19: 19, 27: 27, 16: 16, 0: 0, 15: 15, 21: 21, 5: 5, 17: 17, 29: 29, 10: 10, 14: 14, 2: 2} }, constants: OrderedMap { values: [ConstantMetadata { name: "Schedule", ty: 117, value: [4, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 128, 0, 0, 0, 16, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 32, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 64, 39, 19, 0, 0, 182, 181, 20, 0, 24, 242, 34, 221, 6, 241, 41, 186, 248, 21, 7, 1, 42, 118, 43, 26, 0, 24, 54, 44, 11, 0, 12, 210, 23, 10, 0, 12, 74, 251, 20, 0, 24, 90, 173, 22, 0, 24, 182, 22, 101, 0, 24, 162, 51, 21, 0, 24, 202, 148, 20, 0, 24, 146, 48, 20, 0, 24, 18, 159, 20, 0, 24, 30, 76, 88, 0, 56, 122, 65, 17, 0, 24, 113, 16, 0, 0, 180, 29, 6, 0, 3, 36, 112, 147, 77, 73, 82, 178, 146, 125, 0, 40, 82, 120, 232, 0, 40, 254, 54, 174, 30, 49, 39, 109, 11, 0, 98, 185, 14, 0, 28, 57, 17, 0, 166, 135, 129, 31, 149, 4, 141, 8, 0, 185, 8, 4, 246, 226, 38, 72, 73, 48, 138, 48, 116, 31, 133, 4, 16, 4, 30, 129, 72, 7, 133, 4, 77, 1, 4, 210, 53, 82, 7, 165, 4, 201, 15, 4, 134, 66, 114, 31, 165, 4, 13, 10, 4, 238, 76, 249, 38, 97, 39, 38, 31, 200, 118, 133, 42, 238, 125, 80, 101, 53, 41, 14, 78, 210, 144, 173, 81, 93, 17, 0, 110, 125, 141, 247, 173, 42, 2, 101, 205, 29, 213, 39, 173, 30, 0, 49, 32, 0, 114, 115, 24, 0, 32, 185, 17, 0, 238, 248, 48, 0, 32, 73, 53, 0, 38, 83, 29, 0, 32, 153, 19, 0, 202, 215, 30, 0, 32, 145, 19, 0, 22, 234, 249, 10, 53, 1, 110, 94, 217, 2, 168, 18, 192, 97, 13, 193, 1, 45, 96, 4, 190, 6, 11, 0, 12, 198, 106, 19, 0, 160, 42, 84, 9, 0, 12, 18, 9, 102, 31, 185, 40, 14, 51, 53, 31, 33, 40], docs: [" Cost schedule and limits."] }, ConstantMetadata { name: "DepositPerByte", ty: 6, value: [64, 75, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of balance a caller has to pay for each byte of storage.", "", " # Note", "", " Changing this value for an existing chain might need a storage migration."] }, ConstantMetadata { name: "DefaultDepositLimit", ty: 6, value: [0, 0, 160, 143, 230, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Fallback value to limit the storage deposit if it's not being set by the caller."] }, ConstantMetadata { name: "DepositPerItem", ty: 6, value: [0, 232, 118, 72, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of balance a caller has to pay for each storage item.", "", " # Note", "", " Changing this value for an existing chain might need a storage migration."] }, ConstantMetadata { name: "CodeHashLockupDepositPercent", ty: 121, value: [0, 0, 0, 0], docs: [" The percentage of the storage deposit that should be held for using a code hash.", " Instantiating a contract, or calling [`chain_extension::Ext::add_delegate_dependency`]", " protects the code from being removed. In order to prevent abuse these actions are", " protected with a percentage of the code deposit."] }, ConstantMetadata { name: "MaxCodeLen", ty: 4, value: [0, 0, 4, 0], docs: [" The maximum length of a contract code in bytes.", "", " The value should be chosen carefully taking into the account the overall memory limit", " your runtime has, as well as the [maximum allowed callstack", " depth](#associatedtype.CallStack). Look into the `integrity_test()` for some insights."] }, ConstantMetadata { name: "MaxStorageKeyLen", ty: 4, value: [128, 0, 0, 0], docs: [" The maximum allowable length in bytes for storage keys."] }, ConstantMetadata { name: "MaxDelegateDependencies", ty: 4, value: [32, 0, 0, 0], docs: [" The maximum number of delegate_dependencies that a contract can lock with", " [`chain_extension::Ext::add_delegate_dependency`]."] }, ConstantMetadata { name: "UnsafeUnstableInterface", ty: 42, value: [1], docs: [" Make contract callable functions marked as `#[unstable]` available.", "", " Contracts that use `#[unstable]` functions won't be able to be uploaded unless", " this is set to `true`. This is only meant for testnets and dev nodes in order to", " experiment with new features.", "", " # Warning", "", " Do **not** set to `true` on productions chains."] }, ConstantMetadata { name: "MaxDebugBufferLen", ty: 4, value: [0, 0, 32, 0], docs: [" The maximum length of the debug buffer in bytes."] }, ConstantMetadata { name: "Environment", ty: 122, value: [], docs: [" Type that bundles together all the runtime configurable interface types.", "", " This is not a real config. We just mention the type here as constant so that", " its type appears in the metadata. Only valid value is `()`."] }], map: {"DefaultDepositLimit": 2, "CodeHashLockupDepositPercent": 4, "MaxDelegateDependencies": 7, "UnsafeUnstableInterface": 8, "MaxStorageKeyLen": 6, "MaxCodeLen": 5, "DepositPerItem": 3, "DepositPerByte": 1, "MaxDebugBufferLen": 9, "Schedule": 0, "Environment": 10} }, docs: [] }, PalletMetadataInner { name: "Assets", index: 9, storage: Some(StorageMetadata { prefix: "Assets", entries: OrderedMap { values: [StorageEntryMetadata { name: "Asset", modifier: Optional, entry_type: Map { hashers: [Blake2_128Concat], key_ty: 4, value_ty: 131 }, default: [0], docs: [" Details of an asset."] }, StorageEntryMetadata { name: "Account", modifier: Optional, entry_type: Map { hashers: [Blake2_128Concat, Blake2_128Concat], key_ty: 133, value_ty: 134 }, default: [0], docs: [" The holdings of a specific account for a specific asset."] }, StorageEntryMetadata { name: "Approvals", modifier: Optional, entry_type: Map { hashers: [Blake2_128Concat, Blake2_128Concat, Blake2_128Concat], key_ty: 137, value_ty: 138 }, default: [0], docs: [" Approved balance transfers. First balance is the amount approved for transfer. Second", " is the amount of `T::Currency` reserved for storing this.", " First key is the asset ID, second key is the owner and third key is the delegate."] }, StorageEntryMetadata { name: "Metadata", modifier: Default, entry_type: Map { hashers: [Blake2_128Concat], key_ty: 4, value_ty: 139 }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Metadata of an asset."] }], map: {"Metadata": 3, "Approvals": 2, "Account": 1, "Asset": 0} } }), call_ty: Some(83), call_variant_index: VariantIndex { by_name: {"thaw": 12, "transfer_approved": 25, "destroy_approvals": 4, "force_clear_metadata": 20, "touch": 26, "force_transfer": 10, "force_asset_status": 21, "thaw_asset": 14, "force_set_metadata": 19, "cancel_approval": 23, "approve_transfer": 22, "block": 31, "force_create": 1, "burn": 7, "freeze_asset": 13, "destroy_accounts": 3, "start_destroy": 2, "clear_metadata": 18, "create": 0, "set_min_balance": 28, "finish_destroy": 5, "transfer_ownership": 15, "touch_other": 29, "freeze": 11, "refund_other": 30, "transfer": 8, "transfer_keep_alive": 9, "mint": 6, "set_metadata": 17, "set_team": 16, "force_cancel_approval": 24, "refund": 27}, by_index: {4: 4, 13: 13, 1: 1, 18: 18, 3: 3, 25: 25, 6: 6, 15: 15, 28: 28, 24: 24, 19: 19, 0: 0, 12: 12, 2: 2, 26: 26, 23: 23, 21: 21, 11: 11, 20: 20, 10: 10, 30: 30, 29: 29, 16: 16, 8: 8, 7: 7, 9: 9, 27: 27, 14: 14, 5: 5, 22: 22, 31: 31, 17: 17} }, event_ty: Some(41), event_variant_index: VariantIndex { by_name: {"ForceCreated": 14, "AssetStatusChanged": 20, "MetadataCleared": 16, "OwnerChanged": 5, "ApprovalsDestroyed": 11, "AssetFrozen": 8, "DestructionStarted": 12, "Burned": 3, "ApprovedTransfer": 17, "TeamChanged": 4, "AssetThawed": 9, "MetadataSet": 15, "TransferredApproved": 19, "Blocked": 23, "Issued": 1, "Destroyed": 13, "Transferred": 2, "ApprovalCancelled": 18, "Frozen": 6, "Thawed": 7, "AssetMinBalanceChanged": 21, "Touched": 22, "AccountsDestroyed": 10, "Created": 0}, by_index: {3: 3, 1: 1, 7: 7, 6: 6, 2: 2, 15: 15, 16: 16, 17: 17, 5: 5, 23: 23, 19: 19, 10: 10, 0: 0, 21: 21, 9: 9, 12: 12, 13: 13, 14: 14, 8: 8, 4: 4, 18: 18, 20: 20, 22: 22, 11: 11} }, error_ty: Some(141), error_variant_index: VariantIndex { by_name: {"CallbackFailed": 19, "AssetNotLive": 16, "NoAccount": 1, "BalanceLow": 0, "WouldDie": 11, "Unknown": 3, "LiveAsset": 15, "AlreadyExists": 12, "NoDeposit": 13, "IncorrectStatus": 17, "MinBalanceZero": 7, "NotFrozen": 18, "Frozen": 4, "WouldBurn": 14, "BadMetadata": 9, "InUse": 5, "NoPermission": 2, "UnavailableConsumer": 8, "BadWitness": 6, "Unapproved": 10}, by_index: {7: 7, 9: 9, 15: 15, 11: 11, 1: 1, 6: 6, 18: 18, 3: 3, 14: 14, 4: 4, 12: 12, 17: 17, 5: 5, 16: 16, 0: 0, 10: 10, 13: 13, 2: 2, 8: 8, 19: 19} }, constants: OrderedMap { values: [ConstantMetadata { name: "RemoveItemsLimit", ty: 4, value: [232, 3, 0, 0], docs: [" Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.", "", " Must be configured to result in a weight that makes each call fit in a block."] }, ConstantMetadata { name: "AssetDeposit", ty: 6, value: [0, 0, 193, 111, 242, 134, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The basic amount of funds that must be reserved for an asset."] }, ConstantMetadata { name: "AssetAccountDeposit", ty: 6, value: [0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of funds that must be reserved for a non-provider asset account to be", " maintained."] }, ConstantMetadata { name: "MetadataDepositBase", ty: 6, value: [0, 128, 198, 164, 126, 141, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The basic amount of funds that must be reserved when adding metadata to your asset."] }, ConstantMetadata { name: "MetadataDepositPerByte", ty: 6, value: [0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The additional funds that must be reserved for the number of bytes you store in your", " metadata."] }, ConstantMetadata { name: "ApprovalDeposit", ty: 6, value: [0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of funds that must be reserved when creating a new approval."] }, ConstantMetadata { name: "StringLimit", ty: 4, value: [50, 0, 0, 0], docs: [" The maximum length of a name or symbol stored on-chain."] }], map: {"MetadataDepositPerByte": 4, "ApprovalDeposit": 5, "StringLimit": 6, "AssetDeposit": 1, "AssetAccountDeposit": 2, "RemoveItemsLimit": 0, "MetadataDepositBase": 3} }, docs: [] }], map: {"Contracts": 8, "Authorship": 5, "Timestamp": 3, "Sudo": 7, "Assets": 9, "TransactionPayment": 6, "Utility": 2, "System": 0, "RandomnessCollectiveFlip": 1, "Balances": 4} }, pallets_by_index: {7: 7, 3: 3, 4: 4, 8: 8, 9: 9, 2: 2, 0: 0, 6: 6, 5: 5, 1: 1}, extrinsic: ExtrinsicMetadata { address_ty: 74, call_ty: 71, signature_ty: 142, extra_ty: 148, version: 4, signed_extensions: [SignedExtensionMetadata { identifier: "CheckNonZeroSender", extra_ty: 149, additional_ty: 32 }, SignedExtensionMetadata { identifier: "CheckSpecVersion", extra_ty: 150, additional_ty: 4 }, SignedExtensionMetadata { identifier: "CheckTxVersion", extra_ty: 151, additional_ty: 4 }, SignedExtensionMetadata { identifier: "CheckGenesis", extra_ty: 152, additional_ty: 12 }, SignedExtensionMetadata { identifier: "CheckMortality", extra_ty: 153, additional_ty: 12 }, SignedExtensionMetadata { identifier: "CheckNonce", extra_ty: 155, additional_ty: 32 }, SignedExtensionMetadata { identifier: "CheckWeight", extra_ty: 156, additional_ty: 32 }, SignedExtensionMetadata { identifier: "ChargeTransactionPayment", extra_ty: 157, additional_ty: 32 }] }, runtime_ty: 40, outer_enums: OuterEnumsMetadata { call_enum_ty: 71, event_enum_ty: 20, error_enum_ty: 202 }, dispatch_error_ty: Some(25), apis: OrderedMap { values: [RuntimeApiMetadataInner { name: "Core", methods: OrderedMap { values: [RuntimeApiMethodMetadata { name: "version", inputs: [], output_ty: 61, docs: [" Returns the version of the runtime."] }, RuntimeApiMethodMetadata { name: "execute_block", inputs: [RuntimeApiMethodParamMetadata { name: "block", ty: 158 }], output_ty: 32, docs: [" Execute the given block."] }, RuntimeApiMethodMetadata { name: "initialize_block", inputs: [RuntimeApiMethodParamMetadata { name: "header", ty: 159 }], output_ty: 32, docs: [" Initialize a block with the given header."] }], map: {"version": 0, "execute_block": 1, "initialize_block": 2} }, docs: [" The `Core` runtime api that every Substrate runtime needs to implement."] }, RuntimeApiMetadataInner { name: "Metadata", methods: OrderedMap { values: [RuntimeApiMethodMetadata { name: "metadata", inputs: [], output_ty: 162, docs: [" Returns the metadata of a runtime."] }, RuntimeApiMethodMetadata { name: "metadata_at_version", inputs: [RuntimeApiMethodParamMetadata { name: "version", ty: 4 }], output_ty: 163, docs: [" Returns the metadata at a given version.", "", " If the given `version` isn't supported, this will return `None`.", " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."] }, RuntimeApiMethodMetadata { name: "metadata_versions", inputs: [], output_ty: 164, docs: [" Returns the supported metadata versions.", "", " This can be used to call `metadata_at_version`."] }], map: {"metadata": 0, "metadata_at_version": 1, "metadata_versions": 2} }, docs: [" The `Metadata` api trait that returns metadata for the runtime."] }, RuntimeApiMetadataInner { name: "BlockBuilder", methods: OrderedMap { values: [RuntimeApiMethodMetadata { name: "apply_extrinsic", inputs: [RuntimeApiMethodParamMetadata { name: "extrinsic", ty: 160 }], output_ty: 165, docs: [" Apply the given extrinsic.", "", " Returns an inclusion outcome which specifies if this extrinsic is included in", " this block or not."] }, RuntimeApiMethodMetadata { name: "finalize_block", inputs: [], output_ty: 159, docs: [" Finish the current block."] }, RuntimeApiMethodMetadata { name: "inherent_extrinsics", inputs: [RuntimeApiMethodParamMetadata { name: "inherent", ty: 169 }], output_ty: 161, docs: [" Generate inherent extrinsics. The inherent data will vary from chain to chain."] }, RuntimeApiMethodMetadata { name: "check_inherents", inputs: [RuntimeApiMethodParamMetadata { name: "block", ty: 158 }, RuntimeApiMethodParamMetadata { name: "data", ty: 169 }], output_ty: 173, docs: [" Check that the inherents are valid. The inherent data will vary from chain to chain."] }], map: {"apply_extrinsic": 0, "finalize_block": 1, "check_inherents": 3, "inherent_extrinsics": 2} }, docs: [" The `BlockBuilder` api trait that provides the required functionality for building a block."] }, RuntimeApiMetadataInner { name: "TaggedTransactionQueue", methods: OrderedMap { values: [RuntimeApiMethodMetadata { name: "validate_transaction", inputs: [RuntimeApiMethodParamMetadata { name: "source", ty: 174 }, RuntimeApiMethodParamMetadata { name: "tx", ty: 160 }, RuntimeApiMethodParamMetadata { name: "block_hash", ty: 12 }], output_ty: 175, docs: [" Validate the transaction.", "", " This method is invoked by the transaction pool to learn details about given transaction.", " The implementation should make sure to verify the correctness of the transaction", " against current state. The given `block_hash` corresponds to the hash of the block", " that is used as current state.", "", " Note that this call may be performed by the pool multiple times and transactions", " might be verified in any possible order."] }], map: {"validate_transaction": 0} }, docs: [" The `TaggedTransactionQueue` api trait for interfering with the transaction queue."] }, RuntimeApiMetadataInner { name: "OffchainWorkerApi", methods: OrderedMap { values: [RuntimeApiMethodMetadata { name: "offchain_worker", inputs: [RuntimeApiMethodParamMetadata { name: "header", ty: 159 }], output_ty: 32, docs: [" Starts the off-chain task for given block header."] }], map: {"offchain_worker": 0} }, docs: [" The offchain worker api."] }, RuntimeApiMetadataInner { name: "SessionKeys", methods: OrderedMap { values: [RuntimeApiMethodMetadata { name: "generate_session_keys", inputs: [RuntimeApiMethodParamMetadata { name: "seed", ty: 177 }], output_ty: 13, docs: [" Generate a set of session keys with optionally using the given seed.", " The keys should be stored within the keystore exposed via runtime", " externalities.", "", " The seed needs to be a valid `utf8` string.", "", " Returns the concatenated SCALE encoded public keys."] }, RuntimeApiMethodMetadata { name: "decode_session_keys", inputs: [RuntimeApiMethodParamMetadata { name: "encoded", ty: 13 }], output_ty: 178, docs: [" Decode the given public session keys.", "", " Returns the list of public raw public keys + key type."] }], map: {"generate_session_keys": 0, "decode_session_keys": 1} }, docs: [" Session keys runtime api."] }, RuntimeApiMetadataInner { name: "AccountNonceApi", methods: OrderedMap { values: [RuntimeApiMethodMetadata { name: "account_nonce", inputs: [RuntimeApiMethodParamMetadata { name: "account", ty: 0 }], output_ty: 4, docs: [" Get current account nonce of given `AccountId`."] }], map: {"account_nonce": 0} }, docs: [" The API to query account nonce."] }, RuntimeApiMetadataInner { name: "TransactionPaymentApi", methods: OrderedMap { values: [RuntimeApiMethodMetadata { name: "query_info", inputs: [RuntimeApiMethodParamMetadata { name: "uxt", ty: 160 }, RuntimeApiMethodParamMetadata { name: "len", ty: 4 }], output_ty: 182, docs: [] }, RuntimeApiMethodMetadata { name: "query_fee_details", inputs: [RuntimeApiMethodParamMetadata { name: "uxt", ty: 160 }, RuntimeApiMethodParamMetadata { name: "len", ty: 4 }], output_ty: 183, docs: [] }, RuntimeApiMethodMetadata { name: "query_weight_to_fee", inputs: [RuntimeApiMethodParamMetadata { name: "weight", ty: 9 }], output_ty: 6, docs: [] }, RuntimeApiMethodMetadata { name: "query_length_to_fee", inputs: [RuntimeApiMethodParamMetadata { name: "length", ty: 4 }], output_ty: 6, docs: [] }], map: {"query_info": 0, "query_weight_to_fee": 2, "query_length_to_fee": 3, "query_fee_details": 1} }, docs: [] }, RuntimeApiMetadataInner { name: "TransactionPaymentCallApi", methods: OrderedMap { values: [RuntimeApiMethodMetadata { name: "query_call_info", inputs: [RuntimeApiMethodParamMetadata { name: "call", ty: 71 }, RuntimeApiMethodParamMetadata { name: "len", ty: 4 }], output_ty: 182, docs: [" Query information of a dispatch class, weight, and fee of a given encoded `Call`."] }, RuntimeApiMethodMetadata { name: "query_call_fee_details", inputs: [RuntimeApiMethodParamMetadata { name: "call", ty: 71 }, RuntimeApiMethodParamMetadata { name: "len", ty: 4 }], output_ty: 183, docs: [" Query fee details of a given encoded `Call`."] }, RuntimeApiMethodMetadata { name: "query_weight_to_fee", inputs: [RuntimeApiMethodParamMetadata { name: "weight", ty: 9 }], output_ty: 6, docs: [" Query the output of the current `WeightToFee` given some input."] }, RuntimeApiMethodMetadata { name: "query_length_to_fee", inputs: [RuntimeApiMethodParamMetadata { name: "length", ty: 4 }], output_ty: 6, docs: [" Query the output of the current `LengthToFee` given some input."] }], map: {"query_weight_to_fee": 2, "query_call_fee_details": 1, "query_call_info": 0, "query_length_to_fee": 3} }, docs: [] }, RuntimeApiMetadataInner { name: "ContractsApi", methods: OrderedMap { values: [RuntimeApiMethodMetadata { name: "call", inputs: [RuntimeApiMethodParamMetadata { name: "origin", ty: 0 }, RuntimeApiMethodParamMetadata { name: "dest", ty: 0 }, RuntimeApiMethodParamMetadata { name: "value", ty: 6 }, RuntimeApiMethodParamMetadata { name: "gas_limit", ty: 57 }, RuntimeApiMethodParamMetadata { name: "storage_deposit_limit", ty: 186 }, RuntimeApiMethodParamMetadata { name: "input_data", ty: 13 }], output_ty: 187, docs: [" Perform a call from a specified account to a given contract.", "", " See [`crate::Pallet::bare_call`]."] }, RuntimeApiMethodMetadata { name: "instantiate", inputs: [RuntimeApiMethodParamMetadata { name: "origin", ty: 0 }, RuntimeApiMethodParamMetadata { name: "value", ty: 6 }, RuntimeApiMethodParamMetadata { name: "gas_limit", ty: 57 }, RuntimeApiMethodParamMetadata { name: "storage_deposit_limit", ty: 186 }, RuntimeApiMethodParamMetadata { name: "code", ty: 194 }, RuntimeApiMethodParamMetadata { name: "data", ty: 13 }, RuntimeApiMethodParamMetadata { name: "salt", ty: 13 }], output_ty: 195, docs: [" Instantiate a new contract.", "", " See `[crate::Pallet::bare_instantiate]`."] }, RuntimeApiMethodMetadata { name: "upload_code", inputs: [RuntimeApiMethodParamMetadata { name: "origin", ty: 0 }, RuntimeApiMethodParamMetadata { name: "code", ty: 13 }, RuntimeApiMethodParamMetadata { name: "storage_deposit_limit", ty: 186 }, RuntimeApiMethodParamMetadata { name: "determinism", ty: 82 }], output_ty: 198, docs: [" Upload new code without instantiating a contract from it.", "", " See [`crate::Pallet::bare_upload_code`]."] }, RuntimeApiMethodMetadata { name: "get_storage", inputs: [RuntimeApiMethodParamMetadata { name: "address", ty: 0 }, RuntimeApiMethodParamMetadata { name: "key", ty: 13 }], output_ty: 200, docs: [" Query a given storage key in a given contract.", "", " Returns `Ok(Some(Vec<u8>))` if the storage value exists under the given key in the", " specified account and `Ok(None)` if it doesn't. If the account specified by the address", " doesn't exist, or doesn't have a contract then `Err` is returned."] }], map: {"call": 0, "upload_code": 2, "instantiate": 1, "get_storage": 3} }, docs: [" The API used to dry-run contract interactions."] }], map: {"ContractsApi": 9, "BlockBuilder": 2, "Core": 0, "TaggedTransactionQueue": 3, "SessionKeys": 5, "AccountNonceApi": 6, "OffchainWorkerApi": 4, "TransactionPaymentApi": 7, "TransactionPaymentCallApi": 8, "Metadata": 1} } } }, bytes: [8, 25, 0, 0, 0] })
   Doc-tests tests
